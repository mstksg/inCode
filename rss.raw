<?xml version="1.0" encoding="UTF-8"?><rss dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>in Code — Entries</title><link>https://blog.jle.im/</link><description>Weblog of Justin Le, covering various adventures in programming and explorations in the worlds of computation physics, and knowledge.
</description><item><title>The Baby Paradox in Haskell</title><link>https://blog.jle.im/entry/the-baby-paradox-in-haskell.html</link><description>&lt;p&gt;&lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Everybody_Loves_My_Baby"&gt;Everybody
Loves My Baby&lt;/a&gt;&lt;/em&gt; is a Jazz Standard from 1924 with the famous lyric:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everybody loves my baby, but my baby don’t love nobody but me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which is often formalized as:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\begin{align}
\text{Axiom}_1 . &amp;amp; \forall x. \text{Loves}(x, \text{Baby})  \\
\text{Axiom}_2 . \forall x. &amp;amp; \text{Loves}(\text{Baby}, x) \implies x = me
\end{align}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let’s prove in Haskell (in one line) that these two statements, taken
together, imply that I am my own baby.&lt;/p&gt;
&lt;h2 id="the-normal-proof"&gt;The normal proof&lt;/h2&gt;
&lt;p&gt;The normal proof using propositional logic goes as follows:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;If everyone loves Baby, Baby must love baby. (instantiate axiom 1 with &lt;span
class="math inline"&gt;\(x =
\text{Baby}\)&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;If baby loves someone, that someone must be me. (axiom 2)&lt;/li&gt;
&lt;li&gt;Therefore, because baby loves baby, baby must be me. (instantiate axiom 2
with axiom 1 with &lt;span class="math inline"&gt;\(x = \text{Baby}\)&lt;/span&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="haskell-as-a-theorem-prover"&gt;Haskell as a Theorem Prover&lt;/h2&gt;
&lt;p&gt;First, some background: when using Haskell as a theorem prover, you represent
the theorem as a type, and &lt;em&gt;proving&lt;/em&gt; it involves &lt;em&gt;constructing&lt;/em&gt; a
value of that type — you create an inhabitant of that type.&lt;/p&gt;
&lt;p&gt;Using the Curry-Howard correspondence (often also called the Curry-Howard
isomorphism), we can pair some simple logical connectives with types:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Logical “and” corresponds to tupling (or records of values). If
&lt;code&gt;(a, b)&lt;/code&gt; is inhabited, it means that both &lt;code&gt;a&lt;/code&gt; and
&lt;code&gt;b&lt;/code&gt; are inhabited.&lt;/li&gt;
&lt;li&gt;Logical “or” corresponds to sums, &lt;code&gt;Either a b&lt;/code&gt; being inhabited
implies that either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; are inhabited. They might
both the inhabited, but &lt;code&gt;Either     a b&lt;/code&gt; requires the “proof” of only
one.&lt;/li&gt;
&lt;li&gt;Constructivist logical implication is a function: If &lt;code&gt;a -&amp;gt; b&lt;/code&gt;
is inhabited, it means that an inhabitant of &lt;code&gt;a&lt;/code&gt; can be used to
create an inhabitant of &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any type with a constructor is “true”: &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;Bool&lt;/code&gt;,
&lt;code&gt;String&lt;/code&gt;, etc.; any type with no constructor (&lt;code&gt;data Void&lt;/code&gt;)
is “false” because it has no inhabitants.&lt;/li&gt;
&lt;li&gt;Introducing type variables (&lt;code&gt;forall a.&lt;/code&gt;) corresponds to…well, for
all. If &lt;code&gt;forall a. Either a ()&lt;/code&gt; means that &lt;code&gt;Either a ()&lt;/code&gt;
is “true” (inhabited) for all possible &lt;code&gt;a&lt;/code&gt;. This one represented
logically as &lt;span class="math inline"&gt;\(\forall x. x \lor
\text{True}\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see that, by chaining together those primitives, you can translate a
lot of simple proofs. For example, the proof of “If &lt;code&gt;x&lt;/code&gt; and
&lt;code&gt;y&lt;/code&gt; together imply &lt;code&gt;z&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; implies that
&lt;code&gt;y&lt;/code&gt; implies &lt;code&gt;z&lt;/code&gt;”:&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\forall x y z. ((x \wedge y) \implies z) \implies (x \implies (y \implies z))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;can be expressed as:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;curry&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a b c&lt;span class="op"&gt;.&lt;/span&gt; ((a, b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;curry&lt;/span&gt; f x y &lt;span class="ot"&gt;=&lt;/span&gt; f (x, y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or maybe, “If either x or y imply z, then x implies z and y implies z,
independently:”&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[
\forall x y z. ((x \lor y) \implies z) \implies ((x \implies z) \land (y
\implies z)))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In haskell:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;unEither ::&lt;/span&gt; (&lt;span class="dt"&gt;Either&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c, b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;unEither f &lt;span class="ot"&gt;=&lt;/span&gt; (f &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Left&lt;/span&gt;, f &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Right&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, we have a version of negation: if &lt;code&gt;a -&amp;gt; Void&lt;/code&gt; is
inhabited, then &lt;code&gt;a&lt;/code&gt; must be uninhabited (the &lt;a
href="https://en.wikipedia.org/wiki/Principle_of_explosion"&gt;principle of
explosion&lt;/a&gt;). Let’s prove that “‘x or y’ being false implies both x and y are
false”: &lt;span class="math inline"&gt;\(\forall x y. \neg(x \lor y)
\implies (\neg x \wedge \neg y)\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;deMorgan ::&lt;/span&gt; (&lt;span class="dt"&gt;Either&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Void&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Void&lt;/span&gt;, b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Void&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;deMorgan f &lt;span class="ot"&gt;=&lt;/span&gt; (f &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Left&lt;/span&gt;, f &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Right&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Maybe surprisingly, that’s the same proof as &lt;code&gt;unEither&lt;/code&gt;!)&lt;/p&gt;
&lt;p&gt;We can also think of “type functions” (type constructors that take arguments)
as “parameterized propositions”:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Maybe a&lt;/code&gt; (like &lt;span
class="math inline"&gt;\(\text{Maybe}(x)\)&lt;/span&gt;) is the proposition that &lt;span
class="math inline"&gt;\(\text{True} \lor x\)&lt;/span&gt;: &lt;code&gt;Maybe a&lt;/code&gt; is
always inhabited, because “True or X” is always True. Even
&lt;code&gt;Maybe Void&lt;/code&gt; is inhabited, as &lt;code&gt;Nothing :: Maybe Void&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The sky is the limit if we use GADTs. We can create arbitrary propositions by
restricting what types constructors can be called with. For example, we can
create a proposition that &lt;code&gt;x&lt;/code&gt; is an element of a list:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Elem&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [k] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Here&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Elem&lt;/span&gt; x (x &lt;span class="op"&gt;:&lt;/span&gt; xs)&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;There&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="op"&gt;!&lt;/span&gt;(&lt;span class="dt"&gt;Elem&lt;/span&gt; x ys) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Elem&lt;/span&gt; x (y &lt;span class="op"&gt;:&lt;/span&gt; ys)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Read this as “&lt;code&gt;Elem x xs&lt;/code&gt; is true (inhabited) if either
&lt;code&gt;x&lt;/code&gt; is the first item, or if &lt;code&gt;x&lt;/code&gt; is an elem of the tail of
the list”. So for example, &lt;code&gt;Elem 5 [1,5,6]&lt;/code&gt; is inhabited but
&lt;code&gt;Elem 7 [1,5,6]&lt;/code&gt; is not:&lt;a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;itsTrue ::&lt;/span&gt; &lt;span class="dt"&gt;Elem&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt; [&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;5&lt;/span&gt;,&lt;span class="dv"&gt;6&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;itsTrue &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;There&lt;/span&gt; &lt;span class="dt"&gt;Here&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;itsNotTrue ::&lt;/span&gt; &lt;span class="dt"&gt;Elem&lt;/span&gt; &lt;span class="dv"&gt;7&lt;/span&gt; [&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;5&lt;/span&gt;,&lt;span class="dv"&gt;6&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Void&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;itsNotTrue &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt; {}     &lt;span class="co"&gt;-- GHC is smart enough to know both cases are invalid&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create a two-argument proposition that two types are equal,
&lt;code&gt;a :~: b&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt;&lt;span class="ot"&gt; (:~:) ::&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Refl&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; a &lt;span class="op"&gt;:~:&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The proposition &lt;code&gt;a :~: b&lt;/code&gt; is only inhabited if &lt;code&gt;a&lt;/code&gt; is
equal to &lt;code&gt;b&lt;/code&gt;, since &lt;code&gt;Refl&lt;/code&gt; is its only constructor.&lt;/p&gt;
&lt;p&gt;Of course, this whole correspondence assumes we aren’t ever touching bottom
(things like &lt;code&gt;undefined&lt;/code&gt; for &lt;code&gt;let x = x in x&lt;/code&gt;). For this
exercise, we are working in a total subset of Haskell.&lt;/p&gt;
&lt;h2 id="the-baby-paradox"&gt;The Baby Paradox&lt;/h2&gt;
&lt;p&gt;Now we have enough. Let’s parameterize it over a proposition
&lt;code&gt;loves&lt;/code&gt;, where &lt;code&gt;loves a b&lt;/code&gt; being inhabited means that
&lt;code&gt;a&lt;/code&gt; loves &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can express our axiom as a record of propositions in terms of the atoms
&lt;code&gt;loves&lt;/code&gt;, &lt;code&gt;me&lt;/code&gt;, and &lt;code&gt;baby&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; loves me baby &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; everybodyLovesMyBaby ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; x&lt;span class="op"&gt;.&lt;/span&gt; loves x baby&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; myBabyOnlyLovesMe ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; x&lt;span class="op"&gt;.&lt;/span&gt; loves baby x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; x &lt;span class="op"&gt;:~:&lt;/span&gt; me&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first axiom &lt;code&gt;everybodyLovesMyBaby&lt;/code&gt; means that for &lt;em&gt;any&lt;/em&gt;
&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;loves x baby&lt;/code&gt; must be “true” (inhabited). The second
axiom &lt;code&gt;myBabyOnlyLovesMe&lt;/code&gt; means that &lt;em&gt;if&lt;/em&gt; we have a
&lt;code&gt;loves baby x&lt;/code&gt; (if my baby loves someone), then it must be that
&lt;code&gt;x ~ me&lt;/code&gt;: we must be able to derive that person the baby loves is
indeed &lt;code&gt;me&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The expression of the baby paradox then relies on writing the function&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;babyParadox ::&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; loves me baby &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; me &lt;span class="op"&gt;:~:&lt;/span&gt; baby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And indeed if we play around with GHC enough, we’ll get this typechecking
implementation:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;babyParadox ::&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; loves me baby &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; me &lt;span class="op"&gt;:~:&lt;/span&gt; baby&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;babyParadox &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt;{everybodyLovesMyBaby, myBabyOnlyLovesMe} &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    myBabyOnlyLovesMe everybodyLovesMyBaby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;x &amp;amp; f = f x&lt;/code&gt; from &lt;em&gt;Data.Function&lt;/em&gt;, this becomes
a bit smoother to read:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;babyParadox ::&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; loves me baby &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; me &lt;span class="op"&gt;:~:&lt;/span&gt; baby&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;babyParadox &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt;{everybodyLovesMyBaby, myBabyOnlyLovesMe} &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    everybodyLovesMyBaby &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; myBabyOnlyLovesMe&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we have just proved it! It ended up being a one-liner. So, given the
&lt;code&gt;BabyAxioms loves me baby&lt;/code&gt;, it is possible to prove that
&lt;code&gt;me&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be equal to &lt;code&gt;baby&lt;/code&gt;. That is, it is
impossible to create any &lt;code&gt;BabyAxioms&lt;/code&gt; without &lt;code&gt;me&lt;/code&gt; and
&lt;code&gt;baby&lt;/code&gt; being the same type.&lt;/p&gt;
&lt;p&gt;The actual structure of the proof goes like this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;First, we instantiated &lt;code&gt;everybodyLovesBaby&lt;/code&gt; with
&lt;code&gt;x ~ baby&lt;/code&gt;, to get &lt;code&gt;loves     baby baby&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then, we used &lt;code&gt;myBabyOnlyLovesMe&lt;/code&gt;, which normally takes
&lt;code&gt;loves baby x&lt;/code&gt; and returns &lt;code&gt;x :~: me&lt;/code&gt;. Because we give it
&lt;code&gt;loves baby baby&lt;/code&gt;, we get a &lt;code&gt;baby     :~: me&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s exactly the same structure of the original symbolic proof.&lt;/p&gt;
&lt;h3 id="what-is-love"&gt;What is Love?&lt;/h3&gt;
&lt;p&gt;We made &lt;code&gt;BabyAxioms&lt;/code&gt; parametric over &lt;code&gt;loves&lt;/code&gt;,
&lt;code&gt;me&lt;/code&gt;, and &lt;code&gt;baby&lt;/code&gt;, which means that these apply in
&lt;em&gt;any&lt;/em&gt; universe where love, me, and baby follow the rules of the song
lyrics.&lt;/p&gt;
&lt;p&gt;Essentially this means that for &lt;em&gt;any&lt;/em&gt; binary relationship
&lt;code&gt;Loves x y&lt;/code&gt;, &lt;em&gt;if&lt;/em&gt; that relationship follows these axioms, it
&lt;em&gt;must&lt;/em&gt; be true that me is baby. No matter what that relationship actually
&lt;em&gt;is&lt;/em&gt;, concretely.&lt;/p&gt;
&lt;p&gt;That being said, it might be fun to play around with what this might look
like in concrete realizations of love, me, and my baby.&lt;/p&gt;
&lt;p&gt;First, we could imagine that Love is completely mundane, and can be created
between any two operands without any extra required data or constraints —
essentially, a &lt;a
href="https://hackage.haskell.org/package/base-4.21.0.0/docs/Data-Proxy.html#t:Proxy"&gt;proxy&lt;/a&gt;
between two phantoms:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt; a b &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, it’s impossible to create a &lt;code&gt;BabyAxioms&lt;/code&gt; where
&lt;code&gt;me&lt;/code&gt; and &lt;code&gt;baby&lt;/code&gt; are different:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt; a b &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | me ~ baby is a cosntraint required by GHC&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;proxyLove ::&lt;/span&gt; (me &lt;span class="op"&gt;~&lt;/span&gt; baby) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt; me baby&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;proxyLove &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    { everybodyLovesMyBaby &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    , myBabyOnlyLovesMe &lt;span class="ot"&gt;=&lt;/span&gt; \_ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Refl&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-8"&gt;&lt;a href="#cb13-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;me ~ baby&lt;/code&gt; constraint being required by GHC is actually an
interesting manifestation of the paradox itself, without an explicit proof
required on our part. Alternatively, and more traditionally, we can write
&lt;code&gt;proxyLove :: BabyAxioms Love baby baby&lt;/code&gt; or
&lt;code&gt;proxyLove :: BabyAxioms Love me me&lt;/code&gt; to mean the same thing.&lt;/p&gt;
&lt;p&gt;We can imagine another concrete universe where it is only possible to love my
baby, and my baby is the singular recipient of love in this entire universe:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LoveOnly&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; k &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;LoveMyBaby&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;LoveOnly&lt;/span&gt; baby x baby&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;onlyBaby ::&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt; (&lt;span class="dt"&gt;LoveOnly&lt;/span&gt; baby) me baby&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;onlyBaby &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;BabyAxioms&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    { everybodyLovesMyBaby &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;LoveMyBaby&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    , myBabyOnlyLovesMe &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;LoveMyBaby&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Refl&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we get both axioms fulfilled for free! Basically if we ever have a
&lt;code&gt;LoveOnly baby x me&lt;/code&gt;, the only possible constructor is is
&lt;code&gt;LoveMyBaby :: LoveOnly baby x baby&lt;/code&gt;, so me &lt;em&gt;must&lt;/em&gt; be
baby!&lt;/p&gt;
&lt;p&gt;Finally, we could imagine that love has no possible construction, with no way
to construct or realize. In this case, love is the uninhabited
&lt;code&gt;Void&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Love&lt;/span&gt; a b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this universe, we can finally fulfil &lt;code&gt;myBabyOnlyLovesMe&lt;/code&gt;
without &lt;code&gt;me&lt;/code&gt; being &lt;code&gt;baby&lt;/code&gt;, because “my baby don’t love
nobody but me” is vacuously true if there is no possible love. However, we
cannot fulfil &lt;code&gt;everybodyLovesMyBaby&lt;/code&gt; because no love is possible,
except in the case that the universe of people (&lt;code&gt;k&lt;/code&gt;) is also empty.
But GHC doesn’t have any way to encode empty kinds, I believe (I would love to
hear of any techniques if you knew of any), so we cannot realize these axioms
even if &lt;code&gt;forall (x :: k)&lt;/code&gt; is truly empty.&lt;/p&gt;
&lt;p&gt;Note that we cannot fully encode the axioms purely as a GADT in Haskell — our
&lt;code&gt;LoveOnly&lt;/code&gt; was close, but it is too restrictive: in a fully general
interpretation of the song, we want to be able to allow other recipients of love
besides baby. Basically, Haskell GADTs cannot express the eliminators necessary
to encode &lt;code&gt;myBabyOnlyLovesMe&lt;/code&gt; purely structurally, as far as I am
aware. But I could be wrong.&lt;/p&gt;
&lt;h2 id="why"&gt;Why&lt;/h2&gt;
&lt;p&gt;Nobody who listens to this song seriously believes that the speaker is
intending to convey that they are their own baby, or attempting to tantalize the
listener with an unintuitive tautology. However, this is indeed a common
homework assignment in predicate logic classes, and I wasn’t able to find anyone
covering this yet in Haskell, so I thought might as well be the first.&lt;/p&gt;
&lt;p&gt;Sorry, teachers of courses that teach logic through Haskell.&lt;/p&gt;
&lt;p&gt;I’ve also been using paradox as one of my go-to LLM stumpers, and it’s
actually only recently (with GPT 5) that it’s been able to get this right. Yay
the future? Before this, it would get stuck on trying to define a
&lt;code&gt;Loves&lt;/code&gt; GADT, which is a dead end as previously discussed.&lt;/p&gt;
&lt;section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m pretty sure nobody has ever used it for anything useful, but
I wrote the entire &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/decidable"&gt;decidable&lt;/a&gt;&lt;/em&gt; library
around manipulating propositions like this.&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/the-baby-paradox-in-haskell.html</guid><pubDate>Thu, 21 Aug 2025 15:36:28 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2025-08-21</date></item><item><title>Faking ADTs and GADTs in Languages That Shouldn't Have Them</title><link>https://blog.jle.im/entry/faking-adts-and-gadts.html</link><description>&lt;p&gt;Haskell is the world’s best programming language&lt;a href="#fn1"
class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, but let’s
face the harsh reality that a lot of times in life you’ll have to write in other
programming languages. But alas you have been fully &lt;a
href="https://x.com/kmett/status/1844812186608099463"&gt;Haskell-brained&lt;/a&gt; and
lost all ability to program unless it is type-directed, you don’t even know how
to start writing a program without imagining its shape as a type first.&lt;/p&gt;
&lt;p&gt;Well, fear not. The foundational theory behind Algebraic Data Types and
Generalized Algebraic Data Types (ADTs and GADTs) are so fundamental that
they’ll fit (somewhat) seamlessly into whatever language you’re forced to write.
After all, if they can fit &lt;a
href="https://www.reddit.com/r/haskell/comments/9m2o5r/digging_reveals_profunctor_optics_in_mineacraft/"&gt;profunctor
optics in Microsoft’s Java code&lt;/a&gt;, the sky’s the limit!&lt;/p&gt;
&lt;p&gt;This is an “April Fools” joke in the tradition of &lt;a
href="https://blog.jle.im/entry/verified-instances-in-haskell.html"&gt;my previous
one&lt;/a&gt; in some of these ways that we are going to twist these other languages
might seem unconventional or possibly ill-advised… but also the title is
definitely a lie: these languages definitely &lt;em&gt;should&lt;/em&gt; have them! :D&lt;/p&gt;
&lt;h2 id="normal-adts"&gt;Normal ADTs&lt;/h2&gt;
&lt;p&gt;As a reminder, algebraic Data Types (ADTs) are products and sums; that’s why
they’re algebraic, after all!&lt;/p&gt;
&lt;h3 id="product-types"&gt;Product Types&lt;/h3&gt;
&lt;p&gt;Products are just immutable structs, which pretty much every language
supports — as long as you’re able to make sure they are never mutated.&lt;/p&gt;
&lt;p&gt;Structs in &lt;code&gt;c&lt;/code&gt;, for example, look like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode c"&gt;&lt;code class="sourceCode c"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;typedef&lt;/span&gt; &lt;span class="kw"&gt;struct&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;uint32_t&lt;/span&gt; timestamp&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;double&lt;/span&gt; amount&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt; Transaction&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But you’ll need proper immutable API for it:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode c"&gt;&lt;code class="sourceCode c"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;Transaction createTransaction&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;uint32_t&lt;/span&gt; timestamp&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;double&lt;/span&gt; amount&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;(&lt;/span&gt;Transaction&lt;span class="op"&gt;){&lt;/span&gt; timestamp&lt;span class="op"&gt;,&lt;/span&gt; amount&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;uint32_t&lt;/span&gt; getTimestamp&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;const&lt;/span&gt; Transaction&lt;span class="op"&gt;*&lt;/span&gt; t&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; t&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;timestamp&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;double&lt;/span&gt; getAmount&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;const&lt;/span&gt; Transaction&lt;span class="op"&gt;*&lt;/span&gt; t&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; t&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;amount&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;Transaction setTimestamp&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;const&lt;/span&gt; Transaction&lt;span class="op"&gt;*&lt;/span&gt; t&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;uint32_t&lt;/span&gt; timestamp&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;(&lt;/span&gt;Transaction&lt;span class="op"&gt;){&lt;/span&gt;timestamp&lt;span class="op"&gt;,&lt;/span&gt; t&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;amount&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;Transaction setAmount&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;const&lt;/span&gt; Transaction&lt;span class="op"&gt;*&lt;/span&gt; t&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;double&lt;/span&gt; amount&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;(&lt;/span&gt;Transaction&lt;span class="op"&gt;){&lt;/span&gt;t&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;timestamp&lt;span class="op"&gt;,&lt;/span&gt; amount&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is much simpler in languages where you can associate functions with
data, like OOP and classes. For example, this is the common “value object”
pattern in java (roughly related to the java bean&lt;a href="#fn2"
class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;class&lt;/span&gt; Transaction &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; &lt;span class="dt"&gt;long&lt;/span&gt; timestamp&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; &lt;span class="dt"&gt;double&lt;/span&gt; amount&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;Transaction&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;long&lt;/span&gt; timestamp&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;double&lt;/span&gt; amount&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;timestamp&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; timestamp&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;amount&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; amount&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;long&lt;/span&gt; &lt;span class="fu"&gt;getTimestamp&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; timestamp&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;double&lt;/span&gt; &lt;span class="fu"&gt;getAmount&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="cf"&gt;return&lt;/span&gt; amount&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; Transaction &lt;span class="fu"&gt;setTimestamp&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;long&lt;/span&gt; newTimestamp&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Transaction&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;newTimestamp&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;amount&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; Transaction &lt;span class="fu"&gt;setAmount&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;double&lt;/span&gt; newAmount&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a href="#cb3-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Transaction&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;timestamp&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; newAmount&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a href="#cb3-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-20"&gt;&lt;a href="#cb3-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And there you go. Nothing too surprising there!&lt;/p&gt;
&lt;p&gt;In this case, not only are these ADTs (algebraic data types), they’re also
ADTs (&lt;strong&gt;abstract&lt;/strong&gt; data types): you are meant to work with them
based on a pre-defined abstract interface based on type algebra, instead of
their internal representations.&lt;/p&gt;
&lt;h3 id="sum-types"&gt;Sum Types&lt;/h3&gt;
&lt;p&gt;If your language doesn’t support sum types, usually the way to go is with the
&lt;em&gt;visitor pattern&lt;/em&gt;: the underlying implementation is hidden, and the only
way to process a sum type value is by providing handlers for every branch — a
pattern match as a function, essentially. Your sum values then basically
determine which handler is called.&lt;/p&gt;
&lt;p&gt;For example, we can implement it for a network address type that can either
be IPv4 or IPv6. Here we are using C++ just for generics and lambdas with
closures, for simplicity, but we’ll discuss how this might look in C later.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;format&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;struct&lt;/span&gt; IPAddress &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;bool&lt;/span&gt; isIPv4&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;union&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;uint32_t&lt;/span&gt; ipv4&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;uint8_t&lt;/span&gt; ipv6&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;16&lt;/span&gt;&lt;span class="op"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;template&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;typename&lt;/span&gt; R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;struct&lt;/span&gt; IPAddressVisitor &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="op"&gt;(*&lt;/span&gt;visitIPv4&lt;span class="op"&gt;)(&lt;/span&gt;&lt;span class="dt"&gt;uint32_t&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="op"&gt;(*&lt;/span&gt;visitIPv6&lt;span class="op"&gt;)(&lt;/span&gt;&lt;span class="at"&gt;const&lt;/span&gt; &lt;span class="dt"&gt;uint8_t&lt;/span&gt; &lt;span class="op"&gt;(&amp;amp;)[&lt;/span&gt;&lt;span class="dv"&gt;16&lt;/span&gt;&lt;span class="op"&gt;]);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;template&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kw"&gt;typename&lt;/span&gt; R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;R acceptIPAddress&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="at"&gt;const&lt;/span&gt; IPAddress&lt;span class="op"&gt;&amp;amp;&lt;/span&gt; ip&lt;span class="op"&gt;,&lt;/span&gt; IPAddressVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; ip&lt;span class="op"&gt;.&lt;/span&gt;isIPv4 &lt;span class="op"&gt;?&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;visitIPv4&lt;span class="op"&gt;(&lt;/span&gt;ip&lt;span class="op"&gt;.&lt;/span&gt;ipv4&lt;span class="op"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                     &lt;span class="op"&gt;:&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;visitIPv6&lt;span class="op"&gt;(&lt;/span&gt;ip&lt;span class="op"&gt;.&lt;/span&gt;ipv6&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can create the values using:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;IPAddress mkIPv4&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;uint32_t&lt;/span&gt; value&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; value &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;IPAddress mkIPv6&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="at"&gt;const&lt;/span&gt; &lt;span class="dt"&gt;uint8_t&lt;/span&gt; &lt;span class="op"&gt;(&amp;amp;&lt;/span&gt;value&lt;span class="op"&gt;)[&lt;/span&gt;&lt;span class="dv"&gt;16&lt;/span&gt;&lt;span class="op"&gt;])&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    IPAddress out &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="kw"&gt;false&lt;/span&gt; &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="bu"&gt;std::&lt;/span&gt;copy&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="bu"&gt;std::&lt;/span&gt;begin&lt;span class="op"&gt;(&lt;/span&gt;value&lt;span class="op"&gt;),&lt;/span&gt; &lt;span class="bu"&gt;std::&lt;/span&gt;end&lt;span class="op"&gt;(&lt;/span&gt;value&lt;span class="op"&gt;),&lt;/span&gt; out&lt;span class="op"&gt;.&lt;/span&gt;ipv6&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; out&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can show an address:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="bu"&gt;std::&lt;/span&gt;string showIPAddress&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="at"&gt;const&lt;/span&gt; IPAddress&lt;span class="op"&gt;&amp;amp;&lt;/span&gt; ip&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    IPAddressVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bu"&gt;std::&lt;/span&gt;string&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;[](&lt;/span&gt;&lt;span class="dt"&gt;uint32_t&lt;/span&gt; v&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="bu"&gt;std::&lt;/span&gt;format&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sc"&gt;{}&lt;/span&gt;&lt;span class="st"&gt;.&lt;/span&gt;&lt;span class="sc"&gt;{}&lt;/span&gt;&lt;span class="st"&gt;.&lt;/span&gt;&lt;span class="sc"&gt;{}&lt;/span&gt;&lt;span class="st"&gt;.&lt;/span&gt;&lt;span class="sc"&gt;{}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                               &lt;span class="op"&gt;(&lt;/span&gt;v &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;24&lt;/span&gt;&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; &lt;span class="bn"&gt;0xFF&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;(&lt;/span&gt;v &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;16&lt;/span&gt;&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; &lt;span class="bn"&gt;0xFF&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                               &lt;span class="op"&gt;(&lt;/span&gt;v &lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;8&lt;/span&gt;&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; &lt;span class="bn"&gt;0xFF&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; v &lt;span class="op"&gt;&amp;amp;&lt;/span&gt; &lt;span class="bn"&gt;0xFF&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;[](&lt;/span&gt;&lt;span class="at"&gt;const&lt;/span&gt; &lt;span class="dt"&gt;uint8_t&lt;/span&gt; &lt;span class="op"&gt;(&amp;amp;&lt;/span&gt;v&lt;span class="op"&gt;)[&lt;/span&gt;&lt;span class="dv"&gt;16&lt;/span&gt;&lt;span class="op"&gt;])&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="bu"&gt;std::&lt;/span&gt;format&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                               &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;{:02X}{:02X}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-11"&gt;&lt;a href="#cb6-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                               v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;2&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;3&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;6&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;7&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-12"&gt;&lt;a href="#cb6-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                               v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;8&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;9&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;10&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;11&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;12&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;13&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;14&lt;/span&gt;&lt;span class="op"&gt;],&lt;/span&gt; v&lt;span class="op"&gt;[&lt;/span&gt;&lt;span class="dv"&gt;15&lt;/span&gt;&lt;span class="op"&gt;]);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-13"&gt;&lt;a href="#cb6-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-14"&gt;&lt;a href="#cb6-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-15"&gt;&lt;a href="#cb6-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;return&lt;/span&gt; acceptIPAddress&lt;span class="op"&gt;(&lt;/span&gt;ip&lt;span class="op"&gt;,&lt;/span&gt; visitor&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-16"&gt;&lt;a href="#cb6-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in this way, the compiler enforces that we handle every branch.
And, if we ever add a new branch, everything that ever consumes
&lt;code&gt;IPAddress&lt;/code&gt; with an &lt;code&gt;IPAddressVisitor&lt;/code&gt; will have to add a
new handler.&lt;/p&gt;
&lt;p&gt;In a language &lt;em&gt;without&lt;/em&gt; generics or powerful enough polymorphism, it’s
difficult to enforce the “pure” visitor pattern because you can’t ensure that
all branches return the same type.&lt;/p&gt;
&lt;p&gt;One common pattern is to have an “effectful” visitor pattern, where the point
isn’t to &lt;em&gt;return&lt;/em&gt; something, but to execute something on the payload of
the present branch. This is pretty effective for languages like C, javascript,
python, etc. where types aren’t really a rigid thing.&lt;/p&gt;
&lt;p&gt;For example, this might be how you treat an “implicit nullable”:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;export&lt;/span&gt; &lt;span class="kw"&gt;const&lt;/span&gt; visitMaybe &lt;span class="op"&gt;=&lt;/span&gt; (visitNothing&lt;span class="op"&gt;,&lt;/span&gt; visitJust&lt;span class="op"&gt;,&lt;/span&gt; val) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  (val &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="kw"&gt;null&lt;/span&gt;) &lt;span class="op"&gt;?&lt;/span&gt; &lt;span class="fu"&gt;visitNothing&lt;/span&gt;() &lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="fu"&gt;visitJust&lt;/span&gt;(val)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is basically &lt;code&gt;for_&lt;/code&gt; from Haskell: You can do something like
conditionally launch some action if the value is present.&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;visitMaybe&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  () &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="bu"&gt;console&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;log&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Nothing to request&amp;quot;&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  (reqPayload) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;makeRequest&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;google.com&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; reqPayload)&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  maybeRequest&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On a simpler note, if your language as subtyping built in (maybe with classes
and subclasses) or some other form of dynamic dispatch, you can implement it in
terms of that, which is nice in python, java, C++, etc.&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;visitLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;visitNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr unary&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;visitAdd&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;visitMul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="kw"&gt;class&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, you’re in a language where lambdas are easy, instead of
tupling up the visitor, you could just have &lt;code&gt;accept&lt;/code&gt; itself take a
number of arguments corresponding to each constructor:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;//&lt;/span&gt; &lt;span class="dt"&gt;Alternative&lt;/span&gt; definition without an explicit &lt;span class="dt"&gt;Visitor&lt;/span&gt; &lt;span class="kw"&gt;class&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;abstract &lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    public abstract &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dt"&gt;R&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;R&lt;/span&gt; accept(&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Function&lt;/span&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;int,&lt;span class="dt"&gt;R&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitLit,&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Function&lt;/span&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dt"&gt;Expr&lt;/span&gt;,&lt;span class="dt"&gt;R&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitNegate,&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;BiFunction&lt;/span&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dt"&gt;Expr&lt;/span&gt;,&lt;span class="dt"&gt;Expr&lt;/span&gt;,&lt;span class="dt"&gt;R&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitAdd,&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;BiFunction&lt;/span&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dt"&gt;Expr&lt;/span&gt;,&lt;span class="dt"&gt;Expr&lt;/span&gt;,&lt;span class="dt"&gt;R&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitMul&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    );&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Note that C++ doesn’t allow template virtual methods — not because it’s not
possible within the language semantics and syntax, but rather because the
maintainers are too lazy to add it — so doing this faithfully requires a bit
more creativity)&lt;/p&gt;
&lt;p&gt;Now, if your language has dynamic dispatch or subclass polymorphism, you can
actually do a different encoding, instead of the tagged union. This will work in
languages that don’t allow or fully support naked union types, too. In this
method, each constructor becomes a class, but it’s important to &lt;em&gt;only
allow&lt;/em&gt; access using &lt;code&gt;accept&lt;/code&gt; to properly enforce the sum type
pattern.&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; Lit &lt;span class="kw"&gt;extends&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; &lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;Lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;value&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; value&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;value&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; Negate &lt;span class="kw"&gt;extends&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; Expr unary&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;Negate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr unary&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;unary&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; unary&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;unary&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-24"&gt;&lt;a href="#cb11-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-25"&gt;&lt;a href="#cb11-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; Add &lt;span class="kw"&gt;extends&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-26"&gt;&lt;a href="#cb11-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; Expr left&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-27"&gt;&lt;a href="#cb11-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; Expr right&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-28"&gt;&lt;a href="#cb11-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-29"&gt;&lt;a href="#cb11-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;Add&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-30"&gt;&lt;a href="#cb11-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;left&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; left&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-31"&gt;&lt;a href="#cb11-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;right&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; right&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-32"&gt;&lt;a href="#cb11-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-33"&gt;&lt;a href="#cb11-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-34"&gt;&lt;a href="#cb11-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-35"&gt;&lt;a href="#cb11-35" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-36"&gt;&lt;a href="#cb11-36" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitAdd&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;left&lt;span class="op"&gt;,&lt;/span&gt; right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-37"&gt;&lt;a href="#cb11-37" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-38"&gt;&lt;a href="#cb11-38" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-39"&gt;&lt;a href="#cb11-39" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-40"&gt;&lt;a href="#cb11-40" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; Mul &lt;span class="kw"&gt;extends&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-41"&gt;&lt;a href="#cb11-41" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; Expr left&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-42"&gt;&lt;a href="#cb11-42" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; &lt;span class="dt"&gt;final&lt;/span&gt; Expr right&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-43"&gt;&lt;a href="#cb11-43" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-44"&gt;&lt;a href="#cb11-44" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;Mul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-45"&gt;&lt;a href="#cb11-45" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;left&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; left&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-46"&gt;&lt;a href="#cb11-46" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;right&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; right&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-47"&gt;&lt;a href="#cb11-47" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-48"&gt;&lt;a href="#cb11-48" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-49"&gt;&lt;a href="#cb11-49" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-50"&gt;&lt;a href="#cb11-50" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-51"&gt;&lt;a href="#cb11-51" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitMul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;left&lt;span class="op"&gt;,&lt;/span&gt; right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-52"&gt;&lt;a href="#cb11-52" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-53"&gt;&lt;a href="#cb11-53" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(But, just wanted to note that if you actually &lt;em&gt;are&lt;/em&gt; working in java,
you can actually do something with sealed classes, which allows exhaustiveness
checking for its native switch/case statements.)&lt;/p&gt;
&lt;p&gt;Alternatively you could make all of the subclasses anonymous and expose them
as factory methods, if your language allows it:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="kw"&gt;class&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; Expr &lt;span class="fu"&gt;lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Expr&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;value&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-9"&gt;&lt;a href="#cb12-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-10"&gt;&lt;a href="#cb12-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-11"&gt;&lt;a href="#cb12-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-12"&gt;&lt;a href="#cb12-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-13"&gt;&lt;a href="#cb12-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; Expr &lt;span class="fu"&gt;negate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr unary&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-14"&gt;&lt;a href="#cb12-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Expr&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-15"&gt;&lt;a href="#cb12-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-16"&gt;&lt;a href="#cb12-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-17"&gt;&lt;a href="#cb12-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;unary&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-18"&gt;&lt;a href="#cb12-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-19"&gt;&lt;a href="#cb12-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-20"&gt;&lt;a href="#cb12-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-21"&gt;&lt;a href="#cb12-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-22"&gt;&lt;a href="#cb12-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; Expr &lt;span class="fu"&gt;add&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-23"&gt;&lt;a href="#cb12-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Expr&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-24"&gt;&lt;a href="#cb12-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-25"&gt;&lt;a href="#cb12-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-26"&gt;&lt;a href="#cb12-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visitAdd&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;left&lt;span class="op"&gt;,&lt;/span&gt; right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-27"&gt;&lt;a href="#cb12-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-28"&gt;&lt;a href="#cb12-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-29"&gt;&lt;a href="#cb12-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-30"&gt;&lt;a href="#cb12-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-31"&gt;&lt;a href="#cb12-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ... etc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-32"&gt;&lt;a href="#cb12-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’d then call using:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;class&lt;/span&gt; Main &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; &lt;span class="dt"&gt;void&lt;/span&gt; &lt;span class="fu"&gt;main&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="bu"&gt;String&lt;/span&gt;&lt;span class="op"&gt;[]&lt;/span&gt; args&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        Expr expr &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Mul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Negate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Add&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;&lt;span class="op"&gt;),&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="op"&gt;))),&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dv"&gt;8&lt;/span&gt;&lt;span class="op"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;// or&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="co"&gt;// Expr expr = Eval.mul(Eval.negate(Eval.add(Eval.lit(4), Eval.lit(5))), Eval.lit(8));&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        ExprVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bu"&gt;Integer&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; eval &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; ExprVisitor&lt;span class="op"&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-8"&gt;&lt;a href="#cb13-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt; &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="bu"&gt;Integer&lt;/span&gt; &lt;span class="fu"&gt;visitLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-9"&gt;&lt;a href="#cb13-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; value&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-10"&gt;&lt;a href="#cb13-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-11"&gt;&lt;a href="#cb13-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt; &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="bu"&gt;Integer&lt;/span&gt; &lt;span class="fu"&gt;visitNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr unary&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-12"&gt;&lt;a href="#cb13-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;unary&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-13"&gt;&lt;a href="#cb13-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-14"&gt;&lt;a href="#cb13-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt; &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="bu"&gt;Integer&lt;/span&gt; &lt;span class="fu"&gt;visitAdd&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-15"&gt;&lt;a href="#cb13-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; left&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; right&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-16"&gt;&lt;a href="#cb13-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-17"&gt;&lt;a href="#cb13-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt; &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="bu"&gt;Integer&lt;/span&gt; &lt;span class="fu"&gt;visitMul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr left&lt;span class="op"&gt;,&lt;/span&gt; Expr right&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-18"&gt;&lt;a href="#cb13-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; left&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; right&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-19"&gt;&lt;a href="#cb13-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-20"&gt;&lt;a href="#cb13-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-21"&gt;&lt;a href="#cb13-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-22"&gt;&lt;a href="#cb13-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="bu"&gt;System&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;out&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;println&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;Result: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; expr&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;eval&lt;span class="op"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-23"&gt;&lt;a href="#cb13-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-24"&gt;&lt;a href="#cb13-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passing around function references like this is actually pretty close to the
scott encoding of our data type — and for non-recursive types, it’s essentially
the church encoding.&lt;/p&gt;
&lt;h3 id="recursive-types"&gt;Recursive Types&lt;/h3&gt;
&lt;p&gt;Speaking of recursive types…what if your language doesn’t allow recursive
data types? What if it doesn’t allow recursion at all, or what if recursively
generated values are just annoying to deal with? Just imagine writing that
&lt;code&gt;Expr&lt;/code&gt; type in a language with explicit memory management, for
example. Or, what if you wanted a way to express your recursive types in a more
elegant and runtime-safe manner?&lt;/p&gt;
&lt;p&gt;One thing you can instead do is have your visitor be in its “catamorphism”,
or church encoding. Instead of having the “visitor” take the recursive
sub-values, instead have it return the result of recursively applying
itself.&lt;/p&gt;
&lt;p&gt;Let’s do this in &lt;em&gt;dhall&lt;/em&gt;, one of the most famous non-recursive
languages. Dhall &lt;em&gt;does&lt;/em&gt; have native sum types, so we won’t worry about
manually writing a visitor pattern. But it does &lt;em&gt;not&lt;/em&gt; have recursive data
types.&lt;/p&gt;
&lt;p&gt;Let’s define a type like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Add&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Mul&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we can’t define data types in dhall that refer to themselves. So instead,
we can define them in their “church encoding”: give what you would do with an
&lt;code&gt;Expr&lt;/code&gt; to consume it, where the consumption function is given as if
it were recursively applied.&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode dhall"&gt;&lt;code class="sourceCode "&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(r&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-3"&gt;&lt;a href="#cb15-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;{&lt;span class="co"&gt; &lt;/span&gt;lit&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;/span&gt;
&lt;span id="cb15-4"&gt;&lt;a href="#cb15-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;/span&gt;
&lt;span id="cb15-5"&gt;&lt;a href="#cb15-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;mul&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;/span&gt;
&lt;span id="cb15-6"&gt;&lt;a href="#cb15-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;}&lt;/span&gt;
&lt;span id="cb15-7"&gt;&lt;a href="#cb15-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb15-8"&gt;&lt;a href="#cb15-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;/span&gt;
&lt;span id="cb15-9"&gt;&lt;a href="#cb15-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;forall&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;(r&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;ExprF r&lt;/code&gt; is essentially
&lt;code&gt;ExprVisitor&amp;lt;R&amp;gt;&lt;/code&gt;, except instead of &lt;code&gt;add&lt;/code&gt; being
&lt;code&gt;Expr -&amp;gt; Expr -&amp;gt; r&lt;/code&gt;, it’s &lt;code&gt;r -&amp;gt; r -&amp;gt; r&lt;/code&gt;: the
input values aren’t the expression, but rather the results of recursively
folding on the expression. In fact, our original non-recursive
&lt;code&gt;ExprVisitor&amp;lt;R&amp;gt;&lt;/code&gt; (to be more precise, the
&lt;code&gt;R accept(ExprVisitor&amp;lt;R&amp;gt;)&lt;/code&gt;) is often called the “scott
encoding”, as opposed to the recursive “church encoding” fold.&lt;/p&gt;
&lt;p&gt;For value creation, you &lt;em&gt;take&lt;/em&gt; the visitor and recursively apply:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode dhall"&gt;&lt;code class="sourceCode "&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;lit&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-3"&gt;&lt;a href="#cb16-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(r&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-4"&gt;&lt;a href="#cb16-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;r)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-5"&gt;&lt;a href="#cb16-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;handlers.lit&lt;span class="co"&gt; &lt;/span&gt;x&lt;/span&gt;
&lt;span id="cb16-6"&gt;&lt;a href="#cb16-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-7"&gt;&lt;a href="#cb16-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;/span&gt;
&lt;span id="cb16-8"&gt;&lt;a href="#cb16-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-9"&gt;&lt;a href="#cb16-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-10"&gt;&lt;a href="#cb16-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(r&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-11"&gt;&lt;a href="#cb16-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;r)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-12"&gt;&lt;a href="#cb16-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;handlers.add&lt;span class="co"&gt; &lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;span class="co"&gt; &lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;/span&gt;
&lt;span id="cb16-13"&gt;&lt;a href="#cb16-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-14"&gt;&lt;a href="#cb16-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;mul&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;/span&gt;
&lt;span id="cb16-15"&gt;&lt;a href="#cb16-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-16"&gt;&lt;a href="#cb16-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-17"&gt;&lt;a href="#cb16-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(r&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-18"&gt;&lt;a href="#cb16-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;r)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-19"&gt;&lt;a href="#cb16-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;handlers.mul&lt;span class="co"&gt; &lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;span class="co"&gt; &lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;r&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, &lt;em&gt;using&lt;/em&gt; the data type involves providing the
&lt;code&gt;handler&lt;/code&gt; to fold up from the bottom to top. Note that
&lt;code&gt;add : \(left : Natural) -&amp;gt; \(right : Natural) -&amp;gt; left + right&lt;/code&gt;
already assumes that the handler has been applied to the sub-expressions, so you
get &lt;code&gt;Natural&lt;/code&gt;s on both sides instead of &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode dhall"&gt;&lt;code class="sourceCode "&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;eval&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(e&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;e&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;{&lt;span class="co"&gt; &lt;/span&gt;lit&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;x&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;left&lt;span class="co"&gt; &lt;/span&gt;+&lt;span class="co"&gt; &lt;/span&gt;right&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;mul&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(left&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(right&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;left&lt;span class="co"&gt; &lt;/span&gt;*&lt;span class="co"&gt; &lt;/span&gt;right&lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;            &lt;/span&gt;}&lt;/span&gt;
&lt;span id="cb17-8"&gt;&lt;a href="#cb17-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-9"&gt;&lt;a href="#cb17-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;testVal&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;/span&gt;
&lt;span id="cb17-10"&gt;&lt;a href="#cb17-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;mul&lt;span class="co"&gt; &lt;/span&gt;(add&lt;span class="co"&gt; &lt;/span&gt;(lit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;4&lt;/span&gt;)&lt;span class="co"&gt; &lt;/span&gt;(lit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;5&lt;/span&gt;))&lt;span class="co"&gt; &lt;/span&gt;(lit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;8&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb17-11"&gt;&lt;a href="#cb17-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-12"&gt;&lt;a href="#cb17-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt;&lt;span class="co"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;assert&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;eval&lt;span class="co"&gt; &lt;/span&gt;testVal&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;===&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;72&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pattern is useful even in languages with good datatype recursion, like
Haskell — it’s actually the &lt;a
href="https://hackage.haskell.org/package/recursion-schemes"&gt;recursion-schemes&lt;/a&gt;
refactoring of a recursive data type, and it can be useful to have it live
alongside your normal recursive types. I’ve written &lt;a
href="https://blog.jle.im/entry/tries-with-recursion-schemes.html"&gt;this blog
post&lt;/a&gt; talking about how useful this pattern is to have alongside your normal
recursive types.&lt;/p&gt;
&lt;p&gt;This pattern is pretty portable to other languages too, as long as you can
scrounge together something like Rank-N types:&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; ExprFold&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;foldLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-3"&gt;&lt;a href="#cb18-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;foldNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;R unary&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-4"&gt;&lt;a href="#cb18-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;foldAdd&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;R left&lt;span class="op"&gt;,&lt;/span&gt; R right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-5"&gt;&lt;a href="#cb18-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    R &lt;span class="fu"&gt;foldMul&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;R left&lt;span class="op"&gt;,&lt;/span&gt; R right&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-6"&gt;&lt;a href="#cb18-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-7"&gt;&lt;a href="#cb18-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-8"&gt;&lt;a href="#cb18-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; Expr &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-9"&gt;&lt;a href="#cb18-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprFold&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; fold&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-10"&gt;&lt;a href="#cb18-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-11"&gt;&lt;a href="#cb18-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; Expr &lt;span class="fu"&gt;lit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="dt"&gt;int&lt;/span&gt; value&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-12"&gt;&lt;a href="#cb18-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Expr&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-13"&gt;&lt;a href="#cb18-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-14"&gt;&lt;a href="#cb18-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprFold&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; fold&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-15"&gt;&lt;a href="#cb18-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; fold&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;foldLit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;value&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-16"&gt;&lt;a href="#cb18-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-17"&gt;&lt;a href="#cb18-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-18"&gt;&lt;a href="#cb18-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-19"&gt;&lt;a href="#cb18-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-20"&gt;&lt;a href="#cb18-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; Expr &lt;span class="fu"&gt;negate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;Expr unary&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-21"&gt;&lt;a href="#cb18-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;Expr&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-22"&gt;&lt;a href="#cb18-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-23"&gt;&lt;a href="#cb18-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;ExprFold&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; fold&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-24"&gt;&lt;a href="#cb18-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; fold&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;foldNegate&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;unary&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;fold&lt;span class="op"&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-25"&gt;&lt;a href="#cb18-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-26"&gt;&lt;a href="#cb18-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-27"&gt;&lt;a href="#cb18-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-28"&gt;&lt;a href="#cb18-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb18-29"&gt;&lt;a href="#cb18-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// etc.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-30"&gt;&lt;a href="#cb18-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By “Rank-N types” here, I mean that your objects can generate polymorphic
functions: given an &lt;code&gt;Expr&lt;/code&gt;, you could &lt;em&gt;generate&lt;/em&gt; an
&lt;code&gt;&amp;lt;R&amp;gt; R accept(ExprFold &amp;lt;R&amp;gt; fold)&lt;/code&gt; for any &lt;code&gt;R&lt;/code&gt;,
and not something pre-determined or pre-chosen by your choice of representation
of &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="generalized-algebraic-data-types"&gt;Generalized Algebraic Data Types&lt;/h2&gt;
&lt;p&gt;You’ve implemented ADTs in your language of choice, or you are currently in a
language with native ADTs. Life is good, right? Until that sneaky voice starts
whispering in your hear: “we need more type safety.” You resist that urge, maybe
even get a lot done without it, but eventually you are compelled to give in and
embrace the warm yet harsh embrace of ultimate type safety. Now what?&lt;/p&gt;
&lt;h3 id="singletons-and-witnesses"&gt;Singletons and Witnesses&lt;/h3&gt;
&lt;p&gt;In Haskell, singletons are essentially enums used to associate a value with a
reifiable type. “Reifiable” here means that you can take the runtime value of a
singleton and use it to bring evidence to the type-level. I ran into a
real-world usage of this while writing &lt;a href="https://coronavirus.jle.im/"
class="uri"&gt;https://coronavirus.jle.im/&lt;/a&gt;, a web-based data visualizer of
COVID-19 data (&lt;a
href="https://github.com/mstksg/corona-charts/tree/master"&gt;source here&lt;/a&gt;) in
purescript. I needed a singleton to represent &lt;em&gt;scales&lt;/em&gt; for scatter plots
and linking them to the data that can be plotted. And, not only did it need to
be type-safe in purescript (which has ADTs but not GADTs), it had to be
type-safe in the javascript ffi as well.&lt;/p&gt;
&lt;p&gt;Here’s how it might look in Haskell:&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | Numeric types&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-2"&gt;&lt;a href="#cb19-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-3"&gt;&lt;a href="#cb19-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-4"&gt;&lt;a href="#cb19-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NDouble&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-5"&gt;&lt;a href="#cb19-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NPercent&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Percent&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-6"&gt;&lt;a href="#cb19-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb19-7"&gt;&lt;a href="#cb19-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | Define a scale&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-8"&gt;&lt;a href="#cb19-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-9"&gt;&lt;a href="#cb19-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleDate&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-10"&gt;&lt;a href="#cb19-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLinear&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a   &lt;span class="co"&gt;-- ^ whether to include zero in the axis or not&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb19-11"&gt;&lt;a href="#cb19-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLog&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’d then run it like this:&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;plot ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [(a, b)] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Canvas&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we have the &lt;em&gt;type&lt;/em&gt; of the input tuples being determined by the
&lt;em&gt;values&lt;/em&gt; you pass to &lt;code&gt;plot&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb21-1"&gt;&lt;a href="#cb21-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;:&lt;/span&gt;t plot &lt;span class="dt"&gt;ScaleDate&lt;/span&gt; (&lt;span class="dt"&gt;ScaleLinear&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt; (&lt;span class="dt"&gt;LNumeric&lt;/span&gt; &lt;span class="dt"&gt;NInt&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb21-2"&gt;&lt;a href="#cb21-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;[(&lt;span class="dt"&gt;Date&lt;/span&gt;, &lt;span class="dt"&gt;Int&lt;/span&gt;)] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Canvas&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But let’s say we only had ADTs. And then we’re passing them down to a
javascript FFI which only has structs and functions. We could drop the
type-safety and instead error on runtime, but…no. Type unsafety is not
acceptable.&lt;/p&gt;
&lt;p&gt;The fundamental ability we want to gain is that if we pattern match on
&lt;code&gt;ScaleDate&lt;/code&gt;, then we &lt;em&gt;know&lt;/em&gt; &lt;code&gt;a&lt;/code&gt; has to be
&lt;code&gt;Date&lt;/code&gt;. If we match on &lt;code&gt;NInt&lt;/code&gt;, we know that &lt;code&gt;a&lt;/code&gt;
&lt;em&gt;has&lt;/em&gt; to be &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of this example, we’re going to be implementing a simpler
function in purescript and in javascript: a function that takes a scale type and
a list of points prints the bounds. In Haskell, this looks like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb22-1"&gt;&lt;a href="#cb22-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;AxisBounds&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;AB&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-2"&gt;&lt;a href="#cb22-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; minValue ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb22-3"&gt;&lt;a href="#cb22-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; minLabel ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-4"&gt;&lt;a href="#cb22-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; maxValue ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb22-5"&gt;&lt;a href="#cb22-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; maxLabel ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-6"&gt;&lt;a href="#cb22-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb22-7"&gt;&lt;a href="#cb22-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-8"&gt;&lt;a href="#cb22-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;displayAxis ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;AxisBounds&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb22-9"&gt;&lt;a href="#cb22-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;displayAxis &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-10"&gt;&lt;a href="#cb22-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleDate&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-11"&gt;&lt;a href="#cb22-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-12"&gt;&lt;a href="#cb22-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-13"&gt;&lt;a href="#cb22-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="dt"&gt;AB&lt;/span&gt; xMin (showDate xMin) xMax (showDate xMax)&lt;/span&gt;
&lt;span id="cb22-14"&gt;&lt;a href="#cb22-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLinear&lt;/span&gt; hasZero nt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-15"&gt;&lt;a href="#cb22-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      displayNumericAxis (&lt;span class="kw"&gt;if&lt;/span&gt; hasZero &lt;span class="kw"&gt;then&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt;xs &lt;span class="kw"&gt;else&lt;/span&gt; xs)&lt;/span&gt;
&lt;span id="cb22-16"&gt;&lt;a href="#cb22-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLog&lt;/span&gt; nt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-17"&gt;&lt;a href="#cb22-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      displayNumericAxis nt xs&lt;/span&gt;
&lt;span id="cb22-18"&gt;&lt;a href="#cb22-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-19"&gt;&lt;a href="#cb22-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;displayNumericAxis ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;AxisBounds&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb22-20"&gt;&lt;a href="#cb22-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;displayNumericAxis &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-21"&gt;&lt;a href="#cb22-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-22"&gt;&lt;a href="#cb22-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-23"&gt;&lt;a href="#cb22-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-24"&gt;&lt;a href="#cb22-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="dt"&gt;AB&lt;/span&gt; xMin (printf &lt;span class="st"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; xMin) xMax (printf &lt;span class="st"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; xMax)&lt;/span&gt;
&lt;span id="cb22-25"&gt;&lt;a href="#cb22-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NDouble&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-26"&gt;&lt;a href="#cb22-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-27"&gt;&lt;a href="#cb22-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-28"&gt;&lt;a href="#cb22-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="dt"&gt;AB&lt;/span&gt; xMin (printf &lt;span class="st"&gt;&amp;quot;%.4f&amp;quot;&lt;/span&gt; xMin) xMax (printf &lt;span class="st"&gt;&amp;quot;%.4f&amp;quot;&lt;/span&gt; xMax)&lt;/span&gt;
&lt;span id="cb22-29"&gt;&lt;a href="#cb22-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NPercent&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb22-30"&gt;&lt;a href="#cb22-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-31"&gt;&lt;a href="#cb22-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb22-32"&gt;&lt;a href="#cb22-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="dt"&gt;AB&lt;/span&gt; xMin (printf &lt;span class="st"&gt;&amp;quot;%.1f%%&amp;quot;&lt;/span&gt; (xMin&lt;span class="op"&gt;*&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;)) xMax (printf &lt;span class="st"&gt;&amp;quot;%.1f%%&amp;quot;&lt;/span&gt; (xMax&lt;span class="op"&gt;*&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Pretend the &lt;code&gt;Percent&lt;/code&gt; type is just a newtype-wrapped
&lt;code&gt;Float&lt;/code&gt; or something)&lt;/p&gt;
&lt;p&gt;There are at least two main approaches to do this. We’ll be discussing
runtime equality witnesses and Higher-Kinded Eliminators.&lt;/p&gt;
&lt;h4 id="runtime-witnesses-and-coyoneda-embedding"&gt;Runtime Witnesses and Coyoneda
Embedding&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://ncatlab.org/nlab/show/Yoneda+embedding"&gt;Yoneda Lemma&lt;/a&gt;
is one of the most powerful tools that Category Theory has yielded as a branch
of math, but its sibling &lt;a
href="https://hackage.haskell.org/package/kan-extensions/docs/Data-Functor-Coyoneda.html"&gt;coyoneda&lt;/a&gt;
is one of the most useful Haskell abstractions.&lt;/p&gt;
&lt;p&gt;This doesn’t give you GADTs, but it’s a very lightweight way to “downgrade”
your GADTs into normal GADTs which is appropriate if you don’t need the full
power.&lt;/p&gt;
&lt;p&gt;The trick is this: if you have &lt;code&gt;MyGADT a&lt;/code&gt;, and you know you are
going to be using it to &lt;em&gt;produce&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;s, you can do a covariant
coyoneda transform.&lt;/p&gt;
&lt;p&gt;For example, if you have this type representing potential data sources:&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb23-1"&gt;&lt;a href="#cb23-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-2"&gt;&lt;a href="#cb23-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteSource&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-3"&gt;&lt;a href="#cb23-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;StringSource&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-4"&gt;&lt;a href="#cb23-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb23-5"&gt;&lt;a href="#cb23-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;readByte ::&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-6"&gt;&lt;a href="#cb23-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;readString ::&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-7"&gt;&lt;a href="#cb23-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb23-8"&gt;&lt;a href="#cb23-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;readSource ::&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb23-9"&gt;&lt;a href="#cb23-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;readSource &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-10"&gt;&lt;a href="#cb23-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteSource&lt;/span&gt; h &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; readByte h&lt;/span&gt;
&lt;span id="cb23-11"&gt;&lt;a href="#cb23-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;StringSource&lt;/span&gt; fp &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; readString fp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could instead turn &lt;code&gt;Source&lt;/code&gt; into a non-GADT by making it a
normal parameterized ADT and adding a &lt;code&gt;X -&amp;gt; a&lt;/code&gt; field, which is a
type of CPS transformation:&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb24-1"&gt;&lt;a href="#cb24-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-2"&gt;&lt;a href="#cb24-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteSource&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; (&lt;span class="dt"&gt;Word&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb24-3"&gt;&lt;a href="#cb24-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;StringSource&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb24-4"&gt;&lt;a href="#cb24-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb24-5"&gt;&lt;a href="#cb24-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;byteSource ::&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-6"&gt;&lt;a href="#cb24-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;byteSource h &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ByteSource&lt;/span&gt; h &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-7"&gt;&lt;a href="#cb24-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb24-8"&gt;&lt;a href="#cb24-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;stringSource ::&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-9"&gt;&lt;a href="#cb24-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;stringSource fp &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;StringSource&lt;/span&gt; fp &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-10"&gt;&lt;a href="#cb24-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb24-11"&gt;&lt;a href="#cb24-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;readSource ::&lt;/span&gt; &lt;span class="dt"&gt;Source&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb24-12"&gt;&lt;a href="#cb24-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;readSource &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-13"&gt;&lt;a href="#cb24-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteSource&lt;/span&gt; h out &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; out &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; readByte h&lt;/span&gt;
&lt;span id="cb24-14"&gt;&lt;a href="#cb24-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;StringSource&lt;/span&gt; fp out &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; out &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; readString fp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A nice benefit of this method is that &lt;code&gt;Source&lt;/code&gt; can now have a
&lt;code&gt;Functor&lt;/code&gt; instance, which the original GADT could not.&lt;/p&gt;
&lt;p&gt;And, if &lt;code&gt;MyGADT a&lt;/code&gt; is going to be &lt;em&gt;consuming&lt;/em&gt;
&lt;code&gt;a&lt;/code&gt;s, you can do the &lt;a
href="https://hackage.haskell.org/package/kan-extensions/docs/Data-Functor-Contravariant-Coyoneda.html"&gt;contravariant
coyoneda&lt;/a&gt; transform:&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb25-1"&gt;&lt;a href="#cb25-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Sink&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-2"&gt;&lt;a href="#cb25-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteSink&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb25-3"&gt;&lt;a href="#cb25-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;StringSink&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives it a free &lt;a
href="https://hackage.haskell.org/package/base/docs/Data-Functor-Contravariant.html"&gt;Contravariant&lt;/a&gt;
instance too!&lt;/p&gt;
&lt;p&gt;And, if you are going to be both consuming and producing &lt;code&gt;a&lt;/code&gt;s, you
can do the &lt;em&gt;invariant coyoneda&lt;/em&gt; transform&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb26-1"&gt;&lt;a href="#cb26-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Interface&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb26-2"&gt;&lt;a href="#cb26-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ByteInterface&lt;/span&gt; &lt;span class="dt"&gt;Handle&lt;/span&gt; (&lt;span class="dt"&gt;Word&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb26-3"&gt;&lt;a href="#cb26-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;StringInterface&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) (&lt;span class="dt"&gt;Word&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, in practice, &lt;em&gt;true equality&lt;/em&gt; involves being able to lift
under injective type constructors, and carrying &lt;em&gt;every single&lt;/em&gt;
continuation is unwieldy. We can package them up together with a &lt;strong&gt;runtime
equality witness&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is something we can put “inside” &lt;code&gt;NInt&lt;/code&gt; such that, when we
pattern match on a &lt;code&gt;NType a&lt;/code&gt;, the type system can be assured that
&lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You need some sort of data of type &lt;code&gt;IsEq a b&lt;/code&gt; with functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;refl :: IsEq a a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to :: IsEq a b -&amp;gt; a -&amp;gt; b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sym :: IsEq a b -&amp;gt; IsEq b a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trans :: IsEq a b -&amp;gt; IsEq b c -&amp;gt; IsEq a c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inj :: IsEq (f a) (f b) -&amp;gt; IsEq a b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;sym&lt;/code&gt; you also get
&lt;code&gt;from :: IsEq a b -&amp;gt; b -&amp;gt; a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From all of this, we can recover our original
&lt;code&gt;IsEq a Word -&amp;gt; Word -&amp;gt; a&lt;/code&gt; and
&lt;code&gt;IsEq a Word -&amp;gt; a -&amp;gt; Word&lt;/code&gt; functions, saving us from having to
put two functions.&lt;/p&gt;
&lt;p&gt;Your language of choice might already have this &lt;code&gt;IsEq&lt;/code&gt;. But one of
the more interesting ways to me is Leibniz equality (discussed a lot in &lt;a
href="https://ryanglscott.github.io/2021/08/22/leibniz-equality-in-haskell-part-1/"&gt;this
Ryan Scott post&lt;/a&gt;), which works in languages with higher-kinded polymorphism.
Leibniz quality in languages with higher-kinded polymorphism means that
&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are equal if
&lt;code&gt;forall p. p a -&amp;gt; p b&lt;/code&gt;: any property of &lt;code&gt;a&lt;/code&gt; is also
true of &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Haskell, we write this like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb27"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb27-1"&gt;&lt;a href="#cb27-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p b)&lt;/span&gt;
&lt;span id="cb27-2"&gt;&lt;a href="#cb27-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb27-3"&gt;&lt;a href="#cb27-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;refl ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a a&lt;/span&gt;
&lt;span id="cb27-4"&gt;&lt;a href="#cb27-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;refl &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only possible way to construct a ‘Leibniz’ is with both type parameters
being the same: You can only ever &lt;em&gt;create&lt;/em&gt; a value of type
&lt;code&gt;Leibniz a a&lt;/code&gt;, never a value of &lt;code&gt;Leibniz a b&lt;/code&gt; where
&lt;code&gt;b&lt;/code&gt; is not &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can prove that this is actually equality by writing functions
&lt;code&gt;Leibniz a b -&amp;gt; Leibniz b a&lt;/code&gt; and
&lt;code&gt;Leibniz a b -&amp;gt; Leibniz b c -&amp;gt; Leibniz a c&lt;/code&gt; (&lt;a
href="https://ryanglscott.github.io/2021/08/22/leibniz-equality-in-haskell-part-1/"&gt;this
Ryan Scott post&lt;/a&gt; goes over it well), but in practice we realize this equality
by safely coercing &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; back and forth:&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb28-1"&gt;&lt;a href="#cb28-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt; {&lt;span class="ot"&gt; runIdentity ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id="cb28-2"&gt;&lt;a href="#cb28-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb28-3"&gt;&lt;a href="#cb28-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;to ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb28-4"&gt;&lt;a href="#cb28-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;to (&lt;span class="dt"&gt;Leibniz&lt;/span&gt; f) &lt;span class="ot"&gt;=&lt;/span&gt; runIdentity &lt;span class="op"&gt;.&lt;/span&gt; f &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-5"&gt;&lt;a href="#cb28-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb28-6"&gt;&lt;a href="#cb28-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; a b &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; {&lt;span class="ot"&gt; getOp ::&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a }&lt;/span&gt;
&lt;span id="cb28-7"&gt;&lt;a href="#cb28-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb28-8"&gt;&lt;a href="#cb28-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;from ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb28-9"&gt;&lt;a href="#cb28-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;from (&lt;span class="dt"&gt;Leibniz&lt;/span&gt; f) &lt;span class="ot"&gt;=&lt;/span&gt; getOp (f (&lt;span class="dt"&gt;Op&lt;/span&gt; &lt;span class="fu"&gt;id&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, if your language supports higher-kinded Rank-2 types, you have a
solution!&lt;/p&gt;
&lt;p&gt;There are other solutions in other languages, but they will usually all be
language-dependent.&lt;/p&gt;
&lt;p&gt;Let’s write everything in purescript. The key difference is we use
&lt;code&gt;map (to isNumber) :: Array a -&amp;gt; Array Number&lt;/code&gt;, etc., to get our
&lt;code&gt;Array&lt;/code&gt; as something we know it has the type of.&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb29-1"&gt;&lt;a href="#cb29-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Text.Printf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-2"&gt;&lt;a href="#cb29-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-3"&gt;&lt;a href="#cb29-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p b)&lt;/span&gt;
&lt;span id="cb29-4"&gt;&lt;a href="#cb29-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-5"&gt;&lt;a href="#cb29-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;to ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb29-6"&gt;&lt;a href="#cb29-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;from ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-7"&gt;&lt;a href="#cb29-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-8"&gt;&lt;a href="#cb29-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-9"&gt;&lt;a href="#cb29-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt; (&lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb29-10"&gt;&lt;a href="#cb29-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;NNumber&lt;/span&gt; (&lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Number&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb29-11"&gt;&lt;a href="#cb29-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;NPercent&lt;/span&gt; (&lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Percent&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb29-12"&gt;&lt;a href="#cb29-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-13"&gt;&lt;a href="#cb29-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;AxisBounds&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-14"&gt;&lt;a href="#cb29-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; minValue ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-15"&gt;&lt;a href="#cb29-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; minLabel ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-16"&gt;&lt;a href="#cb29-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; maxValue ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-17"&gt;&lt;a href="#cb29-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; maxLabel ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-18"&gt;&lt;a href="#cb29-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb29-19"&gt;&lt;a href="#cb29-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb29-20"&gt;&lt;a href="#cb29-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;displayNumericAxis ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;AxisBounds&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-21"&gt;&lt;a href="#cb29-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;displayNumericAxis &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-22"&gt;&lt;a href="#cb29-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt; isInt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-23"&gt;&lt;a href="#cb29-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isInt) xs&lt;/span&gt;
&lt;span id="cb29-24"&gt;&lt;a href="#cb29-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isInt) xs&lt;/span&gt;
&lt;span id="cb29-25"&gt;&lt;a href="#cb29-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          &lt;span class="fu"&gt;showInt&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-26"&gt;&lt;a href="#cb29-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; { minValue&lt;span class="op"&gt;:&lt;/span&gt; xMin&lt;/span&gt;
&lt;span id="cb29-27"&gt;&lt;a href="#cb29-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , minLabel&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="fu"&gt;showInt&lt;/span&gt; xMin&lt;/span&gt;
&lt;span id="cb29-28"&gt;&lt;a href="#cb29-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxValue&lt;span class="op"&gt;:&lt;/span&gt; xMax&lt;/span&gt;
&lt;span id="cb29-29"&gt;&lt;a href="#cb29-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxLabel&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="fu"&gt;showInt&lt;/span&gt; xMax&lt;/span&gt;
&lt;span id="cb29-30"&gt;&lt;a href="#cb29-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          }&lt;/span&gt;
&lt;span id="cb29-31"&gt;&lt;a href="#cb29-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NNumber&lt;/span&gt; isNumber &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-32"&gt;&lt;a href="#cb29-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isNumber) xs&lt;/span&gt;
&lt;span id="cb29-33"&gt;&lt;a href="#cb29-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isNumber) xs&lt;/span&gt;
&lt;span id="cb29-34"&gt;&lt;a href="#cb29-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          showFloat &lt;span class="ot"&gt;=&lt;/span&gt; printf (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%.4f&amp;quot;&lt;/span&gt;)   &lt;span class="co"&gt;-- it works a little differently&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-35"&gt;&lt;a href="#cb29-35" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; { minValue&lt;span class="op"&gt;:&lt;/span&gt; xMin&lt;/span&gt;
&lt;span id="cb29-36"&gt;&lt;a href="#cb29-36" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , minLabel&lt;span class="op"&gt;:&lt;/span&gt; showFloat xMin&lt;/span&gt;
&lt;span id="cb29-37"&gt;&lt;a href="#cb29-37" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxValue&lt;span class="op"&gt;:&lt;/span&gt; xMax&lt;/span&gt;
&lt;span id="cb29-38"&gt;&lt;a href="#cb29-38" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxLabel&lt;span class="op"&gt;:&lt;/span&gt; showFloat xMax&lt;/span&gt;
&lt;span id="cb29-39"&gt;&lt;a href="#cb29-39" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          }&lt;/span&gt;
&lt;span id="cb29-40"&gt;&lt;a href="#cb29-40" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NPercent&lt;/span&gt; isPercent &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \xs &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb29-41"&gt;&lt;a href="#cb29-41" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;let&lt;/span&gt; xMin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;minimum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isPercent) xs&lt;/span&gt;
&lt;span id="cb29-42"&gt;&lt;a href="#cb29-42" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          xMax &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;maximum&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; (to isPercent) xs&lt;/span&gt;
&lt;span id="cb29-43"&gt;&lt;a href="#cb29-43" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          showPercent &lt;span class="ot"&gt;=&lt;/span&gt; printf (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%.1f%%&amp;quot;&lt;/span&gt;) &lt;span class="op"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; (_ &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="fl"&gt;100.0&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb29-44"&gt;&lt;a href="#cb29-44" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;       &lt;span class="kw"&gt;in&lt;/span&gt; { minValue&lt;span class="op"&gt;:&lt;/span&gt; xMin&lt;/span&gt;
&lt;span id="cb29-45"&gt;&lt;a href="#cb29-45" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , minLabel&lt;span class="op"&gt;:&lt;/span&gt; showPercent xMin&lt;/span&gt;
&lt;span id="cb29-46"&gt;&lt;a href="#cb29-46" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxValue&lt;span class="op"&gt;:&lt;/span&gt; xMax&lt;/span&gt;
&lt;span id="cb29-47"&gt;&lt;a href="#cb29-47" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          , maxLabel&lt;span class="op"&gt;:&lt;/span&gt; showPercent xMax&lt;/span&gt;
&lt;span id="cb29-48"&gt;&lt;a href="#cb29-48" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To work with our &lt;code&gt;[a]&lt;/code&gt; as if it were &lt;code&gt;[Int]&lt;/code&gt;, we have
to map the coercion function over it that our &lt;code&gt;Leibniz a Int&lt;/code&gt; gave
us. Admittedly, this naive way adds a runtime cost of copying the array. But we
could be more creative with finding the minimum and maximum in this way in
constant space and no extra allocations.&lt;/p&gt;
&lt;p&gt;And, if we wanted to outsource this to the javascript FFI, remember that
javascript doesn’t quite have sum types, so we can create a quick visitor:&lt;/p&gt;
&lt;div class="sourceCode" id="cb30"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb30-1"&gt;&lt;a href="#cb30-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;NVisitor&lt;/span&gt; a r &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-2"&gt;&lt;a href="#cb30-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; nvInt ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-3"&gt;&lt;a href="#cb30-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; nvNumber ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Number&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-4"&gt;&lt;a href="#cb30-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; nvPercent ::&lt;/span&gt; &lt;span class="dt"&gt;Leibniz&lt;/span&gt; a &lt;span class="dt"&gt;Percent&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-5"&gt;&lt;a href="#cb30-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb30-6"&gt;&lt;a href="#cb30-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-7"&gt;&lt;a href="#cb30-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;NAccept&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;NVisitor&lt;/span&gt; a r &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-8"&gt;&lt;a href="#cb30-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-9"&gt;&lt;a href="#cb30-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toAccept ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;NAccept&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb30-10"&gt;&lt;a href="#cb30-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;toAccept &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; _ &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-11"&gt;&lt;a href="#cb30-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt; isInt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \nv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; nv&lt;span class="op"&gt;.&lt;/span&gt;nvInt isInt&lt;/span&gt;
&lt;span id="cb30-12"&gt;&lt;a href="#cb30-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NNumber&lt;/span&gt; isNumber &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \nv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; nv&lt;span class="op"&gt;.&lt;/span&gt;nvNumber isNumber&lt;/span&gt;
&lt;span id="cb30-13"&gt;&lt;a href="#cb30-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NPercent&lt;/span&gt; isPercent &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \nv &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; nv&lt;span class="op"&gt;.&lt;/span&gt;nvPercent isPercent&lt;/span&gt;
&lt;span id="cb30-14"&gt;&lt;a href="#cb30-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-15"&gt;&lt;a href="#cb30-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;foreign &lt;span class="kw"&gt;import&lt;/span&gt; _formatNumeric :: forall a. &lt;span class="dt"&gt;Fn2&lt;/span&gt; (&lt;span class="dt"&gt;NAccept&lt;/span&gt; a) a &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-16"&gt;&lt;a href="#cb30-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-17"&gt;&lt;a href="#cb30-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;formatNumeric ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-18"&gt;&lt;a href="#cb30-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;formatNumeric nt &lt;span class="ot"&gt;=&lt;/span&gt; runFn2 _formatNumeric (toAccept nt)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The FFI binding looks like: (taken from &lt;a
href="https://github.com/mstksg/corona-charts/blob/master/src/D3/Scatter/Type.js"&gt;my
actual source code&lt;/a&gt;)&lt;/p&gt;
&lt;div class="sourceCode" id="cb31"&gt;&lt;pre
class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb31-1"&gt;&lt;a href="#cb31-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="im"&gt;as&lt;/span&gt; d3 &lt;span class="im"&gt;from&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;d3-format&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb31-2"&gt;&lt;a href="#cb31-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb31-3"&gt;&lt;a href="#cb31-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;export&lt;/span&gt; &lt;span class="kw"&gt;const&lt;/span&gt; _formatNumeric &lt;span class="op"&gt;=&lt;/span&gt; (naccept&lt;span class="op"&gt;,&lt;/span&gt; xs) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb31-4"&gt;&lt;a href="#cb31-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;naccept&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb31-5"&gt;&lt;a href="#cb31-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    { &lt;span class="dt"&gt;nvInt&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; (isInt) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; d3&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;format&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;~s&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb31-6"&gt;&lt;a href="#cb31-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;nvNumber&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; (isNumber) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; d3&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;format&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;.3~s&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb31-7"&gt;&lt;a href="#cb31-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;nvPercent&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; (isPercent) &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; d3&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;format&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;+.3~p&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb31-8"&gt;&lt;a href="#cb31-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb31-9"&gt;&lt;a href="#cb31-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Admittedly in the javascript we are throwing away the “GADT type safety”
because we throw away the equality. But we take what we can — we at least retain
the visitor pattern for sum-type type safety and exhaustiveness checking. I
haven’t done this in typescript yet so there might be a way to formalize Leibniz
equality to do this in typescript and keep the whole chain type-safe from top to
bottom.&lt;/p&gt;
&lt;h4 id="higher-kinded-eliminators"&gt;Higher-Kinded Eliminators&lt;/h4&gt;
&lt;p&gt;This is essentially the higher-kinded version of the visitor pattern, except
in dependent type theory these visitors are more often called “eliminators” or
destructors, which is definitely a cooler name.&lt;/p&gt;
&lt;p&gt;In the normal visitor you’d have:&lt;/p&gt;
&lt;div class="sourceCode" id="cb32"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb32-1"&gt;&lt;a href="#cb32-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TheAdmin&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Member&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb32-2"&gt;&lt;a href="#cb32-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb32-3"&gt;&lt;a href="#cb32-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;UserHandler&lt;/span&gt; r &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;UH&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb32-4"&gt;&lt;a href="#cb32-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; uhTheAdmin ::&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb32-5"&gt;&lt;a href="#cb32-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; uhMember ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb32-6"&gt;&lt;a href="#cb32-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But note that if you have the right set of continuations, you have something
that is essentially equal to &lt;code&gt;User&lt;/code&gt; without having to actually use
&lt;code&gt;User&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb33"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb33-1"&gt;&lt;a href="#cb33-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;User&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;UserHandler&lt;/span&gt; r &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb33-2"&gt;&lt;a href="#cb33-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb33-3"&gt;&lt;a href="#cb33-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fromUser ::&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;User&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb33-4"&gt;&lt;a href="#cb33-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fromUser &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb33-5"&gt;&lt;a href="#cb33-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;TheAdmin&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \&lt;span class="dt"&gt;UH&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; uhTheAdmin&lt;/span&gt;
&lt;span id="cb33-6"&gt;&lt;a href="#cb33-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Member&lt;/span&gt; userId &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \&lt;span class="dt"&gt;UH&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; uhMember userId&lt;/span&gt;
&lt;span id="cb33-7"&gt;&lt;a href="#cb33-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb33-8"&gt;&lt;a href="#cb33-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toUser ::&lt;/span&gt; &lt;span class="dt"&gt;User&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Foo&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb33-9"&gt;&lt;a href="#cb33-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;toUser f &lt;span class="ot"&gt;=&lt;/span&gt; f &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;UH&lt;/span&gt; { fhTheAdmin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TheAdmin&lt;/span&gt;, fhMember &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Member&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that &lt;code&gt;User&lt;/code&gt; is actually equivalent to
&lt;code&gt;forall r. UserHandler r -&amp;gt; r&lt;/code&gt;: they’re the same type, so if your
language doesn’t have sum types, you could encode it as
&lt;code&gt;forall r. UserHandler r -&amp;gt; r&lt;/code&gt; instead. Visitors, baby.&lt;/p&gt;
&lt;p&gt;But, then, what actually does the &lt;code&gt;r&lt;/code&gt; type variable represent
here, semantically? Well, in a &lt;code&gt;UserHandler r&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; is the
“target” that we interpret into. But there’s a deeper relationship between
&lt;code&gt;r&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt;: A &lt;code&gt;UserHandler r&lt;/code&gt; essentially
“embeds” a &lt;code&gt;User&lt;/code&gt; into an &lt;code&gt;r&lt;/code&gt;. And, a
&lt;code&gt;UserHandler r -&amp;gt; r&lt;/code&gt; is the application of that embedding to an
actual &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we pick &lt;code&gt;r ~ ()&lt;/code&gt;, then &lt;code&gt;UserHandler ()&lt;/code&gt; embeds
&lt;code&gt;User&lt;/code&gt; into &lt;code&gt;()&lt;/code&gt;. If we pick &lt;code&gt;r ~ String&lt;/code&gt;, then
&lt;code&gt;UserHandler ()&lt;/code&gt; embeds &lt;code&gt;User&lt;/code&gt; into &lt;code&gt;String&lt;/code&gt;
(like, “showing” it). And if we pick &lt;code&gt;r ~ User&lt;/code&gt;, a
&lt;code&gt;UserHandler User&lt;/code&gt; embeds a &lt;code&gt;User&lt;/code&gt; into…itself?&lt;/p&gt;
&lt;p&gt;So here, &lt;code&gt;r&lt;/code&gt; is essentially the projection that we view the user
through. And by making sure we are &lt;code&gt;forall r. UserHandler r -&amp;gt; r&lt;/code&gt;
for &lt;em&gt;all&lt;/em&gt; &lt;code&gt;r&lt;/code&gt;, we ensure that we do not lose any information:
the embedding is completely 1-to-1. It lets you “create” the &lt;code&gt;User&lt;/code&gt;
faithfully in a “polymorphic” way.&lt;/p&gt;
&lt;p&gt;In fact, to hammer this home, some people like to use the name of the type as
the type variable: &lt;code&gt;UserHandler user&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb34"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb34-1"&gt;&lt;a href="#cb34-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | The same thing as before but with things renamed to prove a point&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb34-2"&gt;&lt;a href="#cb34-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;MakeUser&lt;/span&gt; user &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;MakeUser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb34-3"&gt;&lt;a href="#cb34-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; uhTheAdmin ::&lt;/span&gt; user&lt;/span&gt;
&lt;span id="cb34-4"&gt;&lt;a href="#cb34-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; uhMember ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; user&lt;/span&gt;
&lt;span id="cb34-5"&gt;&lt;a href="#cb34-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb34-6"&gt;&lt;a href="#cb34-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb34-7"&gt;&lt;a href="#cb34-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;User&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; user&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;MakeUser&lt;/span&gt; user &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; user&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;forall user.&lt;/code&gt; lets us faithfully “create” a &lt;code&gt;User&lt;/code&gt;
within the system we have, without actually having a &lt;code&gt;User&lt;/code&gt; data
type. Essentially we can imagine the &lt;code&gt;r&lt;/code&gt; in the &lt;code&gt;forall r&lt;/code&gt;
as “standing in” for &lt;code&gt;User&lt;/code&gt;, even if that type doesn’t actually
exist.&lt;/p&gt;
&lt;p&gt;Now, here’s the breakthrough: If we can use &lt;code&gt;forall (r :: Type)&lt;/code&gt;
to substitute for &lt;code&gt;User :: Type&lt;/code&gt;, how about we use a
&lt;code&gt;forall (p :: Type -&amp;gt; Type)&lt;/code&gt; to substitute for a
&lt;code&gt;Scale :: Type -&amp;gt; Type&lt;/code&gt;?&lt;/p&gt;
&lt;div class="sourceCode" id="cb35"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb35-1"&gt;&lt;a href="#cb35-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb35-2"&gt;&lt;a href="#cb35-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleDate&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb35-3"&gt;&lt;a href="#cb35-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLinear&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;LType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb35-4"&gt;&lt;a href="#cb35-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLog&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb35-5"&gt;&lt;a href="#cb35-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb35-6"&gt;&lt;a href="#cb35-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ScaleHandler&lt;/span&gt; p a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SH&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb35-7"&gt;&lt;a href="#cb35-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; shDate ::&lt;/span&gt; p &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb35-8"&gt;&lt;a href="#cb35-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; shLinear ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb35-9"&gt;&lt;a href="#cb35-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; shLog ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb35-10"&gt;&lt;a href="#cb35-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb35-11"&gt;&lt;a href="#cb35-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb35-12"&gt;&lt;a href="#cb35-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Scale&amp;#39;&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;ScaleHandler&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb35-13"&gt;&lt;a href="#cb35-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb35-14"&gt;&lt;a href="#cb35-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fromScale ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&amp;#39;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb35-15"&gt;&lt;a href="#cb35-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fromScale &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb35-16"&gt;&lt;a href="#cb35-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleDate&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \&lt;span class="dt"&gt;SH&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; shDate&lt;/span&gt;
&lt;span id="cb35-17"&gt;&lt;a href="#cb35-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLinear&lt;/span&gt; hasZero lt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \&lt;span class="dt"&gt;SH&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; shLinear hasZero lt&lt;/span&gt;
&lt;span id="cb35-18"&gt;&lt;a href="#cb35-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;ScaleLog&lt;/span&gt; nt &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \&lt;span class="dt"&gt;SH&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; shLog nt&lt;/span&gt;
&lt;span id="cb35-19"&gt;&lt;a href="#cb35-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb35-20"&gt;&lt;a href="#cb35-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toScale ::&lt;/span&gt; &lt;span class="dt"&gt;Scale&amp;#39;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb35-21"&gt;&lt;a href="#cb35-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;toScale f &lt;span class="ot"&gt;=&lt;/span&gt; f &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;SH&lt;/span&gt; { shDate &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ScaleDate&lt;/span&gt;, shLinear &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ScaleLinear&lt;/span&gt;, shLog &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ScaleLog&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in our new system, &lt;code&gt;forall p. ScaleHandler p a -&amp;gt; p a&lt;/code&gt; is
identical to &lt;code&gt;Scale&lt;/code&gt;: we can use &lt;code&gt;p a&lt;/code&gt; to substitute in
&lt;code&gt;Scale&lt;/code&gt; in our language even if our language itself cannot support
GADTs.&lt;/p&gt;
&lt;p&gt;So let’s write &lt;code&gt;formatNType&lt;/code&gt; in purescript. We no longer have an
actual &lt;code&gt;Scale&lt;/code&gt; sum type, but its higher-kinded church encoding:&lt;/p&gt;
&lt;div class="sourceCode" id="cb36"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb36-1"&gt;&lt;a href="#cb36-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-2"&gt;&lt;a href="#cb36-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; int ::&lt;/span&gt; p &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-3"&gt;&lt;a href="#cb36-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; number ::&lt;/span&gt; p &lt;span class="dt"&gt;Number&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-4"&gt;&lt;a href="#cb36-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; percent ::&lt;/span&gt; p &lt;span class="dt"&gt;Percent&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-5"&gt;&lt;a href="#cb36-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb36-6"&gt;&lt;a href="#cb36-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb36-7"&gt;&lt;a href="#cb36-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Scale&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-8"&gt;&lt;a href="#cb36-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; date ::&lt;/span&gt; p &lt;span class="dt"&gt;Date&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-9"&gt;&lt;a href="#cb36-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; linear ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb36-10"&gt;&lt;a href="#cb36-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; log ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb36-11"&gt;&lt;a href="#cb36-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb36-12"&gt;&lt;a href="#cb36-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb36-13"&gt;&lt;a href="#cb36-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ntInt ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-14"&gt;&lt;a href="#cb36-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ntInt nth &lt;span class="ot"&gt;=&lt;/span&gt; nth&lt;span class="op"&gt;.&lt;/span&gt;int&lt;/span&gt;
&lt;span id="cb36-15"&gt;&lt;a href="#cb36-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb36-16"&gt;&lt;a href="#cb36-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ntNumber ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Number&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-17"&gt;&lt;a href="#cb36-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ntNumber nth &lt;span class="ot"&gt;=&lt;/span&gt; nth&lt;span class="op"&gt;.&lt;/span&gt;number&lt;/span&gt;
&lt;span id="cb36-18"&gt;&lt;a href="#cb36-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb36-19"&gt;&lt;a href="#cb36-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ntPercent ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Percent&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-20"&gt;&lt;a href="#cb36-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ntPercent nth &lt;span class="ot"&gt;=&lt;/span&gt; nth&lt;span class="op"&gt;.&lt;/span&gt;percent&lt;/span&gt;
&lt;span id="cb36-21"&gt;&lt;a href="#cb36-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb36-22"&gt;&lt;a href="#cb36-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;formatNType ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-23"&gt;&lt;a href="#cb36-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;formatNType nt &lt;span class="ot"&gt;=&lt;/span&gt; f&lt;/span&gt;
&lt;span id="cb36-24"&gt;&lt;a href="#cb36-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-25"&gt;&lt;a href="#cb36-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Op&lt;/span&gt; f &lt;span class="ot"&gt;=&lt;/span&gt; nt&lt;/span&gt;
&lt;span id="cb36-26"&gt;&lt;a href="#cb36-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      { int&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb36-27"&gt;&lt;a href="#cb36-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      , number&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; printf (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%.4f&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb36-28"&gt;&lt;a href="#cb36-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      , percent&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; printf (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%.1f%%&amp;quot;&lt;/span&gt;) &lt;span class="op"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; (_ &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="fl"&gt;100.0&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb36-29"&gt;&lt;a href="#cb36-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are using&lt;/p&gt;
&lt;div class="sourceCode" id="cb37"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb37-1"&gt;&lt;a href="#cb37-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; b a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as our “target”: turning an &lt;code&gt;NType a&lt;/code&gt; into an
&lt;code&gt;Op String a&lt;/code&gt;. And an &lt;code&gt;Op String a&lt;/code&gt; is an
&lt;code&gt;a -&amp;gt; String&lt;/code&gt;, which is what we wanted! The &lt;code&gt;int&lt;/code&gt; field
is &lt;code&gt;Op String Int&lt;/code&gt;, the &lt;code&gt;number&lt;/code&gt; field is
&lt;code&gt;Op String Number&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;In many languages, using this technique effectively requires having a newtype
wrapper on-hand, so it might be unwieldy in non-trivial situations. For example,
if we wanted to write our previous axis function which is
&lt;code&gt;NType a -&amp;gt; [a] -&amp;gt; String&lt;/code&gt;, we’d have to have a newtype wrapper
for &lt;code&gt;[a] -&amp;gt; String&lt;/code&gt; that has &lt;code&gt;a&lt;/code&gt; as its argument:&lt;/p&gt;
&lt;div class="sourceCode" id="cb38"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb38-1"&gt;&lt;a href="#cb38-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;OpList&lt;/span&gt; b a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Op&lt;/span&gt; ([a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or you could re-use &lt;code&gt;Compose&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb39"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb39-1"&gt;&lt;a href="#cb39-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Compose&lt;/span&gt; f g a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Compose&lt;/span&gt; (f (g a))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and your &lt;code&gt;p&lt;/code&gt; projection type would be &lt;code&gt;Compose Op []&lt;/code&gt;.
So, you don’t necessarily have to write a bespoke newtype wrapper, but you do
have to devote some brain cycles to think it through (unless you’re in a
language that doesn’t need newtype wrappers to have this work, like we’ll
discuss later).&lt;/p&gt;
&lt;p&gt;By the way, this method generalizes well to multiple arguments: if you have a
type like &lt;code&gt;MyGADT a b c&lt;/code&gt;, you just need to project into a
&lt;code&gt;forall (p :: k1 -&amp;gt; k2 -&amp;gt; k3 -&amp;gt; Type)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I believe I have read somewhere that the two methods discussed here (runtime
equality witness vs. higher-kinded eliminator) are not actually fully identical
in their power, and there are GADTs where one would work and not the other … but
I can’t remember where I read this and I’m also not big-brained enough to figure
out what those situations are. But if you, reader, have any idea, please let me
know!&lt;/p&gt;
&lt;h3 id="existential-types"&gt;Existential Types&lt;/h3&gt;
&lt;p&gt;Let’s take a quick break to talk about something that’s not
&lt;em&gt;technically&lt;/em&gt; related to GADTs but is often used alongside them.&lt;/p&gt;
&lt;p&gt;What if we wanted to store a value with its &lt;code&gt;NType&lt;/code&gt; and hide the
type variable? In Haskell we’d write this like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb40"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb40-1"&gt;&lt;a href="#cb40-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-2"&gt;&lt;a href="#cb40-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NInt&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-3"&gt;&lt;a href="#cb40-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NDouble&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-4"&gt;&lt;a href="#cb40-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NPercent&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; &lt;span class="dt"&gt;Percent&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-5"&gt;&lt;a href="#cb40-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb40-6"&gt;&lt;a href="#cb40-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt; (&lt;span class="dt"&gt;NType&lt;/span&gt; a) a&lt;/span&gt;
&lt;span id="cb40-7"&gt;&lt;a href="#cb40-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb40-8"&gt;&lt;a href="#cb40-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;formatNType ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-9"&gt;&lt;a href="#cb40-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;formatNType nt x &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-10"&gt;&lt;a href="#cb40-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb40-11"&gt;&lt;a href="#cb40-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;formatSomeNType ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb40-12"&gt;&lt;a href="#cb40-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;formatSomeNType (&lt;span class="dt"&gt;SomeNType&lt;/span&gt; nt x) &lt;span class="ot"&gt;=&lt;/span&gt; formatNType nt x&lt;/span&gt;
&lt;span id="cb40-13"&gt;&lt;a href="#cb40-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb40-14"&gt;&lt;a href="#cb40-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;myFavoriteNumbers ::&lt;/span&gt; [&lt;span class="dt"&gt;SomeNType&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb40-15"&gt;&lt;a href="#cb40-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;myFavoriteNumbers &lt;span class="ot"&gt;=&lt;/span&gt; [&lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="dt"&gt;NInt&lt;/span&gt; &lt;span class="dv"&gt;3&lt;/span&gt;, &lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="dt"&gt;NDouble&lt;/span&gt; &lt;span class="fu"&gt;pi&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if our language doesn’t have existentials? Remember, this is
basically a value &lt;code&gt;SomeNType&lt;/code&gt; that &lt;em&gt;isn’t&lt;/em&gt; a Generic, but
&lt;em&gt;contains&lt;/em&gt; both a &lt;code&gt;NType a&lt;/code&gt; and an &lt;code&gt;a&lt;/code&gt; of the
&lt;em&gt;same&lt;/em&gt; variable.&lt;/p&gt;
&lt;p&gt;One strategy we have available is to CPS-transform our existentials into
their CPS form (continuation-passing style form). Basically, we write exactly
what we want to do with our contents &lt;em&gt;if we pattern matched&lt;/em&gt; on them.
It’s essentially a Rank-N visitor pattern with only a single constructor:&lt;/p&gt;
&lt;div class="sourceCode" id="cb41"&gt;&lt;pre
class="sourceCode purescript"&gt;&lt;code class="sourceCode purescript"&gt;&lt;span id="cb41-1"&gt;&lt;a href="#cb41-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb41-2"&gt;&lt;a href="#cb41-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb41-3"&gt;&lt;a href="#cb41-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;someNType ::&lt;/span&gt; &lt;span class="dt"&gt;NType&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb41-4"&gt;&lt;a href="#cb41-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;someNType nt x &lt;span class="ot"&gt;=&lt;/span&gt; \f &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f nt x&lt;/span&gt;
&lt;span id="cb41-5"&gt;&lt;a href="#cb41-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb41-6"&gt;&lt;a href="#cb41-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;formatSomeNumeric ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNType&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb41-7"&gt;&lt;a href="#cb41-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;formatSomeNumeric snt &lt;span class="ot"&gt;=&lt;/span&gt; snt&lt;/span&gt;
&lt;span id="cb41-8"&gt;&lt;a href="#cb41-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    \nt x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; formatNumeric nt x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can imagine, syntactically, that &lt;code&gt;snt&lt;/code&gt; acts as its “own”
pattern match, except instead of matching on
&lt;code&gt;SomeNType nt x -&amp;gt; ..&lt;/code&gt;, you “match” on
&lt;code&gt;\nt x -&amp;gt; ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This general pattern works for languages with traditional generics like Java
too:&lt;/p&gt;
&lt;div class="sourceCode" id="cb42"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb42-1"&gt;&lt;a href="#cb42-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; SomeNTypeVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-2"&gt;&lt;a href="#cb42-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;visit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;NType&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; nt&lt;span class="op"&gt;,&lt;/span&gt; A val&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-3"&gt;&lt;a href="#cb42-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-4"&gt;&lt;a href="#cb42-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb42-5"&gt;&lt;a href="#cb42-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; SomeNType &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-6"&gt;&lt;a href="#cb42-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="kw"&gt;abstract&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;SomeNTypeVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-7"&gt;&lt;a href="#cb42-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb42-8"&gt;&lt;a href="#cb42-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// One option: the factory method&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-9"&gt;&lt;a href="#cb42-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="dt"&gt;static&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; SomeNType &lt;span class="fu"&gt;someNType&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;NType&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; nt&lt;span class="op"&gt;,&lt;/span&gt; A val&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-10"&gt;&lt;a href="#cb42-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="fu"&gt;SomeNType&lt;/span&gt;&lt;span class="op"&gt;()&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-11"&gt;&lt;a href="#cb42-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-12"&gt;&lt;a href="#cb42-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;SomeNTypeVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-13"&gt;&lt;a href="#cb42-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;nt&lt;span class="op"&gt;,&lt;/span&gt; val&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-14"&gt;&lt;a href="#cb42-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-15"&gt;&lt;a href="#cb42-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-16"&gt;&lt;a href="#cb42-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-17"&gt;&lt;a href="#cb42-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-18"&gt;&lt;a href="#cb42-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb42-19"&gt;&lt;a href="#cb42-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// Second option: the subtype hiding a type variable, which you have to always&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-20"&gt;&lt;a href="#cb42-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// make sure to upcast into `SomeNType` after creating&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-21"&gt;&lt;a href="#cb42-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; SomeNTypeImpl&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;extends&lt;/span&gt; SomeNType &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-22"&gt;&lt;a href="#cb42-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; NType&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; nt&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-23"&gt;&lt;a href="#cb42-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;private&lt;/span&gt; A val&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-24"&gt;&lt;a href="#cb42-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb42-25"&gt;&lt;a href="#cb42-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="fu"&gt;SomeNTypeImpl&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;NType&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;A&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; nt&lt;span class="op"&gt;,&lt;/span&gt; A val&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-26"&gt;&lt;a href="#cb42-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;nt&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; nt&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-27"&gt;&lt;a href="#cb42-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;this&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;val&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; val&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-28"&gt;&lt;a href="#cb42-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-29"&gt;&lt;a href="#cb42-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb42-30"&gt;&lt;a href="#cb42-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="at"&gt;@Override&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-31"&gt;&lt;a href="#cb42-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;public&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; R &lt;span class="fu"&gt;accept&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;SomeNTypeVisitor&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;R&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; visitor&lt;span class="op"&gt;)&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-32"&gt;&lt;a href="#cb42-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;return&lt;/span&gt; visitor&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;visit&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;nt&lt;span class="op"&gt;,&lt;/span&gt; val&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-33"&gt;&lt;a href="#cb42-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb42-34"&gt;&lt;a href="#cb42-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does…anyone write java like this? I tried committing this once while at
Google and I got automatically flagged to be put on a PIP.&lt;/p&gt;
&lt;h3 id="recursive-gadts"&gt;Recursive GADTs&lt;/h3&gt;
&lt;p&gt;The climax of this discussion: what if your language does not support GADTs
&lt;em&gt;or&lt;/em&gt; recursive data types?&lt;/p&gt;
&lt;p&gt;We’re going to be using &lt;em&gt;dhall&lt;/em&gt; as an example again, but note that the
lessons applied here are potentially useful even when you &lt;em&gt;do&lt;/em&gt; have
recursive types: we’re going to be talking about a higher-kinded church
encoding, which can be a useful form of your data types that live alongside your
normal recursive ones.&lt;/p&gt;
&lt;p&gt;Let’s imagine &lt;code&gt;Expr&lt;/code&gt; as a GADT, where &lt;code&gt;Expr a&lt;/code&gt;
represents an &lt;code&gt;Expr&lt;/code&gt; that evaluates to an &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb43"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb43-1"&gt;&lt;a href="#cb43-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-2"&gt;&lt;a href="#cb43-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NatLit&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-3"&gt;&lt;a href="#cb43-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;BoolLit&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-4"&gt;&lt;a href="#cb43-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Add&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-5"&gt;&lt;a href="#cb43-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;LTE&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-6"&gt;&lt;a href="#cb43-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Ternary&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb43-7"&gt;&lt;a href="#cb43-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb43-8"&gt;&lt;a href="#cb43-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;eval ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb43-9"&gt;&lt;a href="#cb43-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;eval &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb43-10"&gt;&lt;a href="#cb43-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;NatLit&lt;/span&gt; n &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; n&lt;/span&gt;
&lt;span id="cb43-11"&gt;&lt;a href="#cb43-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;BoolLit&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id="cb43-12"&gt;&lt;a href="#cb43-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Add&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;+&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb43-13"&gt;&lt;a href="#cb43-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;LTE&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval a &lt;span class="op"&gt;&amp;lt;=&lt;/span&gt; eval b&lt;/span&gt;
&lt;span id="cb43-14"&gt;&lt;a href="#cb43-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Ternary&lt;/span&gt; b x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; eval b &lt;span class="kw"&gt;then&lt;/span&gt; eval x &lt;span class="kw"&gt;else&lt;/span&gt; eval y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding this type variable ensures that our &lt;code&gt;Expr&lt;/code&gt; is type-safe:
it’s impossible to &lt;code&gt;Add&lt;/code&gt; an &lt;code&gt;Expr Bool&lt;/code&gt;, and the two
branches of a &lt;code&gt;Ternary&lt;/code&gt; must have the same result type, etc. And, we
can write &lt;code&gt;eval :: Expr a -&amp;gt; a&lt;/code&gt; and know exactly what type will be
returned.&lt;/p&gt;
&lt;p&gt;Now, let’s combine the two concepts: First, the church encoding, where our
handlers take the “final result” of our fold &lt;code&gt;r&lt;/code&gt; instead of the
recursive value &lt;code&gt;Expr&lt;/code&gt;. Second, the higher-kinded eliminator pattern
where we embed &lt;code&gt;Expr :: Type -&amp;gt; Type&lt;/code&gt; into
&lt;code&gt;forall (p :: Type -&amp;gt; Type)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And finally, we get:&lt;a href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb44"&gt;&lt;pre class="sourceCode dhall"&gt;&lt;code class="sourceCode "&gt;&lt;span id="cb44-1"&gt;&lt;a href="#cb44-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;=&lt;/span&gt;
&lt;span id="cb44-2"&gt;&lt;a href="#cb44-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-3"&gt;&lt;a href="#cb44-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;{&lt;span class="co"&gt; &lt;/span&gt;natLit&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb44-4"&gt;&lt;a href="#cb44-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;boolLit&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;/span&gt;
&lt;span id="cb44-5"&gt;&lt;a href="#cb44-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb44-6"&gt;&lt;a href="#cb44-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;ternary&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;forall&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;a&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;a&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;a&lt;/span&gt;
&lt;span id="cb44-7"&gt;&lt;a href="#cb44-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;}&lt;/span&gt;
&lt;span id="cb44-8"&gt;&lt;a href="#cb44-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb44-9"&gt;&lt;a href="#cb44-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;/span&gt;
&lt;span id="cb44-10"&gt;&lt;a href="#cb44-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type&lt;/span&gt;
&lt;span id="cb44-11"&gt;&lt;a href="#cb44-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;forall&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;a&lt;/span&gt;
&lt;span id="cb44-12"&gt;&lt;a href="#cb44-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb44-13"&gt;&lt;a href="#cb44-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;eval&lt;/span&gt;
&lt;span id="cb44-14"&gt;&lt;a href="#cb44-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;forall&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;a&lt;/span&gt;
&lt;span id="cb44-15"&gt;&lt;a href="#cb44-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-16"&gt;&lt;a href="#cb44-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(e&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-17"&gt;&lt;a href="#cb44-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;e&lt;/span&gt;
&lt;span id="cb44-18"&gt;&lt;a href="#cb44-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;(&lt;span class="op"&gt;\&lt;/span&gt;(q&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;q)&lt;/span&gt;
&lt;span id="cb44-19"&gt;&lt;a href="#cb44-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;{&lt;span class="co"&gt; &lt;/span&gt;natLit&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;x&lt;/span&gt;
&lt;span id="cb44-20"&gt;&lt;a href="#cb44-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;boolLit&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Bool)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;x&lt;/span&gt;
&lt;span id="cb44-21"&gt;&lt;a href="#cb44-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt; &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;x&lt;span class="co"&gt; &lt;/span&gt;+&lt;span class="co"&gt; &lt;/span&gt;y&lt;/span&gt;
&lt;span id="cb44-22"&gt;&lt;a href="#cb44-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;,&lt;span class="co"&gt; &lt;/span&gt;ternary&lt;span class="co"&gt; &lt;/span&gt;=&lt;/span&gt;
&lt;span id="cb44-23"&gt;&lt;a href="#cb44-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;              &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-24"&gt;&lt;a href="#cb44-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;              &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(b&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Bool)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-25"&gt;&lt;a href="#cb44-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;              &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;a)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-26"&gt;&lt;a href="#cb44-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;              &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;a)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb44-27"&gt;&lt;a href="#cb44-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;                &lt;/span&gt;&lt;span class="kw"&gt;if&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;b&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;then&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;x&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;else&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;y&lt;/span&gt;
&lt;span id="cb44-28"&gt;&lt;a href="#cb44-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;          &lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, now instead of &lt;code&gt;add&lt;/code&gt; taking &lt;code&gt;Expr&lt;/code&gt;, it takes
&lt;code&gt;p Natural&lt;/code&gt;: the “&lt;code&gt;Natural&lt;/code&gt; result of the fold”.
&lt;code&gt;p&lt;/code&gt; not only stands in for what we embed &lt;code&gt;Expr&lt;/code&gt; into, it
stands in for the result of the recursive fold. That’s why in &lt;code&gt;eval&lt;/code&gt;,
the first arguments of &lt;code&gt;add&lt;/code&gt; are the &lt;code&gt;Natural&lt;/code&gt; results of
the sub-evaluation.&lt;/p&gt;
&lt;p&gt;These values can be created in the same way as before, merging the two
techniques, sending the handlers downstream:&lt;/p&gt;
&lt;div class="sourceCode" id="cb45"&gt;&lt;pre class="sourceCode dhall"&gt;&lt;code class="sourceCode "&gt;&lt;span id="cb45-1"&gt;&lt;a href="#cb45-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;natLit&lt;/span&gt;
&lt;span id="cb45-2"&gt;&lt;a href="#cb45-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb45-3"&gt;&lt;a href="#cb45-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(n&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-4"&gt;&lt;a href="#cb45-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-5"&gt;&lt;a href="#cb45-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;p)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-6"&gt;&lt;a href="#cb45-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;handlers.natLit&lt;span class="co"&gt; &lt;/span&gt;n&lt;/span&gt;
&lt;span id="cb45-7"&gt;&lt;a href="#cb45-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb45-8"&gt;&lt;a href="#cb45-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;boolLit&lt;/span&gt;
&lt;span id="cb45-9"&gt;&lt;a href="#cb45-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;/span&gt;
&lt;span id="cb45-10"&gt;&lt;a href="#cb45-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(n&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Bool)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-11"&gt;&lt;a href="#cb45-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-12"&gt;&lt;a href="#cb45-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;p)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-13"&gt;&lt;a href="#cb45-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;handlers.boolLit&lt;span class="co"&gt; &lt;/span&gt;n&lt;/span&gt;
&lt;span id="cb45-14"&gt;&lt;a href="#cb45-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb45-15"&gt;&lt;a href="#cb45-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;add&lt;/span&gt;
&lt;span id="cb45-16"&gt;&lt;a href="#cb45-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb45-17"&gt;&lt;a href="#cb45-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-18"&gt;&lt;a href="#cb45-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-19"&gt;&lt;a href="#cb45-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-20"&gt;&lt;a href="#cb45-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;p)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-21"&gt;&lt;a href="#cb45-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;handlers.add&lt;span class="co"&gt; &lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;span class="co"&gt; &lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;/span&gt;
&lt;span id="cb45-22"&gt;&lt;a href="#cb45-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb45-23"&gt;&lt;a href="#cb45-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;ternary&lt;/span&gt;
&lt;span id="cb45-24"&gt;&lt;a href="#cb45-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="kw"&gt;forall&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Bool&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a&lt;/span&gt;
&lt;span id="cb45-25"&gt;&lt;a href="#cb45-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(a&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-26"&gt;&lt;a href="#cb45-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(b&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Bool)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-27"&gt;&lt;a href="#cb45-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-28"&gt;&lt;a href="#cb45-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;a)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-29"&gt;&lt;a href="#cb45-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(p&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Type&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;Type)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-30"&gt;&lt;a href="#cb45-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;      &lt;/span&gt;&lt;span class="op"&gt;\&lt;/span&gt;(handlers&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;ExprF&lt;span class="co"&gt; &lt;/span&gt;p)&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb45-31"&gt;&lt;a href="#cb45-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;        &lt;/span&gt;handlers.ternary&lt;span class="co"&gt; &lt;/span&gt;(b&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;span class="co"&gt; &lt;/span&gt;(x&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;span class="co"&gt; &lt;/span&gt;(y&lt;span class="co"&gt; &lt;/span&gt;p&lt;span class="co"&gt; &lt;/span&gt;handlers)&lt;/span&gt;
&lt;span id="cb45-32"&gt;&lt;a href="#cb45-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb45-33"&gt;&lt;a href="#cb45-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;let&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;testVal&lt;/span&gt;
&lt;span id="cb45-34"&gt;&lt;a href="#cb45-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;Expr&lt;span class="co"&gt; &lt;/span&gt;Natural&lt;/span&gt;
&lt;span id="cb45-35"&gt;&lt;a href="#cb45-35" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;    &lt;/span&gt;=&lt;span class="co"&gt; &lt;/span&gt;add&lt;span class="co"&gt; &lt;/span&gt;(natLit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;5&lt;/span&gt;)&lt;span class="co"&gt; &lt;/span&gt;(add&lt;span class="co"&gt; &lt;/span&gt;(natLit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;6&lt;/span&gt;)&lt;span class="co"&gt; &lt;/span&gt;(natLit&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;7&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb45-36"&gt;&lt;a href="#cb45-36" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb45-37"&gt;&lt;a href="#cb45-37" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt;&lt;span class="co"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;assert&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;:&lt;span class="co"&gt; &lt;/span&gt;eval&lt;span class="co"&gt; &lt;/span&gt;testVal&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="op"&gt;===&lt;/span&gt;&lt;span class="co"&gt; &lt;/span&gt;&lt;span class="dv"&gt;18&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all of this is difficult to parse, try reviewing both the recursive ADT
section and the higher-kinded eliminator section and making sure you understand
both well before tackling this, which combines them together!&lt;/p&gt;
&lt;p&gt;Admittedly in Haskell (and purescript) this is a lot simpler because we don’t
have to explicitly pass in type variables:&lt;/p&gt;
&lt;div class="sourceCode" id="cb46"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb46-1"&gt;&lt;a href="#cb46-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ExprF&lt;/span&gt; p &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ExprF&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-2"&gt;&lt;a href="#cb46-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; natLit ::&lt;/span&gt; &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p &lt;span class="dt"&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-3"&gt;&lt;a href="#cb46-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; boolLit ::&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-4"&gt;&lt;a href="#cb46-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; add ::&lt;/span&gt; p &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p &lt;span class="dt"&gt;Natural&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p &lt;span class="dt"&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-5"&gt;&lt;a href="#cb46-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; ternary ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt;  p &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb46-6"&gt;&lt;a href="#cb46-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb46-7"&gt;&lt;a href="#cb46-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb46-8"&gt;&lt;a href="#cb46-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; p&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;ExprF&lt;/span&gt; p a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb46-9"&gt;&lt;a href="#cb46-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb46-10"&gt;&lt;a href="#cb46-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;eval ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb46-11"&gt;&lt;a href="#cb46-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;eval e &lt;span class="ot"&gt;=&lt;/span&gt; runIdentity &lt;span class="op"&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-12"&gt;&lt;a href="#cb46-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  e&lt;/span&gt;
&lt;span id="cb46-13"&gt;&lt;a href="#cb46-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    { natLit &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-14"&gt;&lt;a href="#cb46-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    , boolLit &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb46-15"&gt;&lt;a href="#cb46-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    , add &lt;span class="ot"&gt;=&lt;/span&gt; \(&lt;span class="dt"&gt;Identity&lt;/span&gt; x) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \(&lt;span class="dt"&gt;Identity&lt;/span&gt; y) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Identity&lt;/span&gt; (x &lt;span class="op"&gt;+&lt;/span&gt; y)&lt;/span&gt;
&lt;span id="cb46-16"&gt;&lt;a href="#cb46-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    , ternary &lt;span class="ot"&gt;=&lt;/span&gt; \(&lt;span class="dt"&gt;Identity&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \(&lt;span class="dt"&gt;Identity&lt;/span&gt; x) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; \(&lt;span class="dt"&gt;Identity&lt;/span&gt; y) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; b &lt;span class="kw"&gt;then&lt;/span&gt; x &lt;span class="kw"&gt;else&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb46-17"&gt;&lt;a href="#cb46-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb46-18"&gt;&lt;a href="#cb46-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb46-19"&gt;&lt;a href="#cb46-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;ternary ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb46-20"&gt;&lt;a href="#cb46-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ternary b x y handlers &lt;span class="ot"&gt;=&lt;/span&gt; handlers&lt;span class="op"&gt;.&lt;/span&gt;ternary (b handlers) (x handlers) (y handlers)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But one nice thing about the dhall version that’s incidental to dhall is that
it doesn’t require any extra newtype wrappers like the Haskell one does. That’s
because type inference tends to choke on things like this, but dhall doesn’t
really have any type inference: all of the types are passed explicitly. It’s one
of the facts about dhall that make it nice for things like this.&lt;/p&gt;
&lt;h2 id="congratulations"&gt;Congratulations&lt;/h2&gt;
&lt;p&gt;In any case, if you’ve made it this far, congratulations! You are a master of
ADTs and GADTs. Admittedly every language is different, and some of these
solutions have to be tweaked for the language in question. And, if your program
gets very complicated, there is a good chance that things will become
ergonomically unfeasible.&lt;/p&gt;
&lt;p&gt;But I hope, at least, that this inspires your imagination to try to bring
your haskell principles, techniques, standards, practices, and brainrot into the
language of your choice (or language you are forced to work with).&lt;/p&gt;
&lt;p&gt;And, if you ever find interesting ways to bring these things into a language
not discussed here (or a new interesting technique or pattern), I would
absolutely love to hear about it!&lt;/p&gt;
&lt;p&gt;Until next time, happy “Haskelling”!&lt;/p&gt;
&lt;h2 id="special-thanks"&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it
possible for me to devote time to researching and writing these posts. Very
special thanks to my supporter at the “Amazing” level on &lt;a
href="https://www.patreon.com/justinle/overview"&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I bet you thought there was going be some sort of caveat in this
footnote, didn’t you?&lt;a href="#fnref1" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I didn’t think I’d ever write “java bean” non-ironically on my
blog, but there’s a first time for everything.&lt;a href="#fnref2"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Be aware that this implementation is not necessarily
appropriately lazy or short-circuiting in &lt;code&gt;Ternary&lt;/code&gt;: it might
evaluate both sides returning the chosen branch.&lt;a href="#fnref3"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/faking-adts-and-gadts.html</guid><pubDate>Tue,  1 Apr 2025 17:29:41 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2025-04-01</date></item><item><title>Sum Types and Subtypes and Unions</title><link>https://blog.jle.im/entry/sum-types-and-subtypes-and-unions.html</link><description>&lt;p&gt;There’s yet again been a bit of functional programming-adjacent twitter drama
recently, but it’s actually sort of touched into some subtleties about sum types
that I am asked about (and think about) a lot nowadays. So, I’d like to take
this opportunity to talk a bit about the “why” and nature of sum types and how
to use them effectively, and how they contrast with other related concepts in
programming and software development and when even cases where sum types aren’t
the best option.&lt;/p&gt;
&lt;h2 id="sum-types-at-their-best"&gt;Sum Types at their Best&lt;/h2&gt;
&lt;p&gt;The quintessential sum type that you just can’t live without is
&lt;code&gt;Maybe&lt;/code&gt;, now adopted in a lot of languages as
&lt;code&gt;Optional&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have a value of type &lt;code&gt;Maybe Int&lt;/code&gt;, it means that its valid
values are &lt;code&gt;Nothing&lt;/code&gt;, &lt;code&gt;Just 0&lt;/code&gt;, &lt;code&gt;Just 1&lt;/code&gt;,
etc.&lt;/p&gt;
&lt;p&gt;This is also a good illustration to why we call it a “sum” type: if
&lt;code&gt;a&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; possible values, then &lt;code&gt;Maybe a&lt;/code&gt; has
&lt;code&gt;1 + n&lt;/code&gt;: we add the single new value &lt;code&gt;Nothing&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;The “benefit” of the sum type is illustrated pretty clearly here too: every
time you &lt;em&gt;use&lt;/em&gt; a value of type &lt;code&gt;Maybe Int&lt;/code&gt;, you are forced to
consider the fact that it could be &lt;code&gt;Nothing&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;showMaybeInt ::&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;showMaybeInt &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;There&amp;#39;s nothing here&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Just&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Something is here: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s because usually in sum type implementations, they are implemented in a
way that forces you to handle each case exhaustively. Otherwise, sum types are
&lt;em&gt;much&lt;/em&gt; less useful.&lt;/p&gt;
&lt;p&gt;At the most fundamental level, this behaves like a compiler-enforced null
check, but built within the language in user-space instead being compiler magic,
ad-hoc syntax&lt;a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;, or static analysis — and the fact that it
can live in user-space is why it’s been adopted so widely. At a higher level,
functional abstractions like Functor, Applicative, Monad, Foldable, Traversable
allow you to use a &lt;code&gt;Maybe a&lt;/code&gt; like just a normal &lt;code&gt;a&lt;/code&gt; with
the appropriate semantics, but that’s &lt;a
href="https://blog.jle.im/entry/inside-my-world-ode-to-functor-and-monad.html"&gt;a
topic for another time (like 2014)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This power is very special to me on a personal level. I remember many years
ago on my first major haskell project changing a type from &lt;code&gt;String&lt;/code&gt;
to &lt;code&gt;Maybe String&lt;/code&gt;, and then GHC telling me every place in the
codebase where something needed to change in order for things to work still.
Coming from dynamically typed languages in the past, this sublime experience
truly altered my brain chemistry and Haskell-pilled me for the rest of my life.
I still remember the exact moment, what coffee shop I was at, what my order was,
the weather that day … it was truly the first day of the rest of my life.&lt;/p&gt;
&lt;p&gt;It should be noted that I don’t consider sum types a “language feature” or a
compiler feature as much as I’d consider it a design pattern. Languages that
don’t have sum types built-in can usually implement them using typed unions and
an abstract visitor pattern interface (more on that later). Of course, having a
way to “check” your code before running it (like with a type system or
statically verified type annotations) does make a lot of the features much more
useful.&lt;/p&gt;
&lt;p&gt;Anyway, this basic pattern can be extended to include more error information
in your &lt;code&gt;Nothing&lt;/code&gt; branch, which is how you get the
&lt;code&gt;Either e a&lt;/code&gt; type in the Haskell standard library, or the
&lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt; type in rust.&lt;/p&gt;
&lt;p&gt;Along different lines, we have the common use case of defining syntax
trees:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Negate&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Add&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Mul&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;eval ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;eval &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Lit&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Negate&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;(eval x)&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Add&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;+&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Sub&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;-&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Mul&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;*&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a href="#cb3-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a href="#cb3-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    wrap ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-20"&gt;&lt;a href="#cb3-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    wrap prio opPrec s&lt;/span&gt;
&lt;span id="cb3-21"&gt;&lt;a href="#cb3-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&lt;/span&gt; prio &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; opPrec &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; s &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-22"&gt;&lt;a href="#cb3-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;otherwise&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; s&lt;/span&gt;
&lt;span id="cb3-23"&gt;&lt;a href="#cb3-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    go prio &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-24"&gt;&lt;a href="#cb3-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Lit&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb3-25"&gt;&lt;a href="#cb3-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Negate&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;2&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb3-26"&gt;&lt;a href="#cb3-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Add&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb3-27"&gt;&lt;a href="#cb3-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Sub&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb3-28"&gt;&lt;a href="#cb3-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Mul&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;2&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb3-29"&gt;&lt;a href="#cb3-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-30"&gt;&lt;a href="#cb3-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb3-31"&gt;&lt;a href="#cb3-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-32"&gt;&lt;a href="#cb3-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; pretty myExpr&lt;/span&gt;
&lt;span id="cb3-33"&gt;&lt;a href="#cb3-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;print&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; eval myExpr&lt;/span&gt;
&lt;span id="cb3-34"&gt;&lt;a href="#cb3-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-35"&gt;&lt;a href="#cb3-35" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    myExpr &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Mul&lt;/span&gt; (&lt;span class="dt"&gt;Negate&lt;/span&gt; (&lt;span class="dt"&gt;Add&lt;/span&gt; (&lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dv"&gt;4&lt;/span&gt;) (&lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt;))) (&lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dv"&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;-(4 + 5) * 8
-72&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we add a new command to the sum type, the compiler enforces us to
handle it.&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Lit&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Negate&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Add&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Mul&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Abs&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;eval ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;eval &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Lit&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Negate&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;(eval x)&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Add&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;+&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Sub&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;-&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Mul&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; eval x &lt;span class="op"&gt;*&lt;/span&gt; eval y&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Abs&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;abs&lt;/span&gt; (eval x)&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pretty ::&lt;/span&gt; &lt;span class="dt"&gt;Expr&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;pretty &lt;span class="ot"&gt;=&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    wrap ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    wrap prio opPrec s&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&lt;/span&gt; prio &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; opPrec &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; s &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;otherwise&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; s&lt;/span&gt;
&lt;span id="cb5-25"&gt;&lt;a href="#cb5-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    go prio &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-26"&gt;&lt;a href="#cb5-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Lit&lt;/span&gt; i &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb5-27"&gt;&lt;a href="#cb5-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Negate&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;2&lt;/span&gt; x&lt;/span&gt;
&lt;span id="cb5-28"&gt;&lt;a href="#cb5-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Add&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb5-29"&gt;&lt;a href="#cb5-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Sub&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb5-30"&gt;&lt;a href="#cb5-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Mul&lt;/span&gt; x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; go &lt;span class="dv"&gt;1&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;2&lt;/span&gt; y&lt;/span&gt;
&lt;span id="cb5-31"&gt;&lt;a href="#cb5-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Abs&lt;/span&gt; x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; wrap prio &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; go &lt;span class="dv"&gt;0&lt;/span&gt; x &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another example where things shine are as clearly-fined APIs between
processes. For example, we can imagine a “command” type that sends different
types of commands with different payloads. This can be interpreted as perhaps
the result of parsing command line arguments or the message in some
communication protocol.&lt;/p&gt;
&lt;p&gt;For example, you could have a protocol that launches and controls
processes:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Launch&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)    &lt;span class="co"&gt;-- ^ takes a name, returns a process ID&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Stop&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)        &lt;span class="co"&gt;-- ^ takes a process ID, returns success/failure&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;launch ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;launch nm &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Launch&lt;/span&gt; nm &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;stop ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;stop pid &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Stop&lt;/span&gt; pid &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This ADT is written in the “interpreter” pattern (used often with things like
free monad), where any arguments not involving &lt;code&gt;a&lt;/code&gt; are the command
payload, any &lt;code&gt;X -&amp;gt; a&lt;/code&gt; represent that the command could respond
with &lt;code&gt;X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s write a sample interpreter backing the state in an IntMap in an
IORef:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.IntMap&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;IM&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.IntMap&lt;/span&gt; (&lt;span class="dt"&gt;IntMap&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runCommand ::&lt;/span&gt; &lt;span class="dt"&gt;IORef&lt;/span&gt; (&lt;span class="dt"&gt;IntMap&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;runCommand ref &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Launch&lt;/span&gt; newName next &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        currMap &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; readIORef ref&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;let&lt;/span&gt; newId &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; IM.lookupMax currMap &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;              &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;              &lt;span class="dt"&gt;Just&lt;/span&gt; (i, _) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; i &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        modifyIORef ref &lt;span class="op"&gt;$&lt;/span&gt; IM.insert newId newName&lt;/span&gt;
&lt;span id="cb7-12"&gt;&lt;a href="#cb7-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;pure&lt;/span&gt; (next newId)&lt;/span&gt;
&lt;span id="cb7-13"&gt;&lt;a href="#cb7-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Stop&lt;/span&gt; procId next &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-14"&gt;&lt;a href="#cb7-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        existed &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; IM.member procId &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; readIORef ref&lt;/span&gt;
&lt;span id="cb7-15"&gt;&lt;a href="#cb7-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        modifyIORef ref &lt;span class="op"&gt;$&lt;/span&gt; IM.delete procId&lt;/span&gt;
&lt;span id="cb7-16"&gt;&lt;a href="#cb7-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;pure&lt;/span&gt; (next existed)&lt;/span&gt;
&lt;span id="cb7-17"&gt;&lt;a href="#cb7-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-18"&gt;&lt;a href="#cb7-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb7-19"&gt;&lt;a href="#cb7-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-20"&gt;&lt;a href="#cb7-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ref &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; newIORef IM.empty&lt;/span&gt;
&lt;span id="cb7-21"&gt;&lt;a href="#cb7-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    aliceId &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; runCommand ref &lt;span class="op"&gt;$&lt;/span&gt; launch &lt;span class="st"&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-22"&gt;&lt;a href="#cb7-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Launched alice with ID &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; aliceId&lt;/span&gt;
&lt;span id="cb7-23"&gt;&lt;a href="#cb7-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    bobId &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; runCommand ref &lt;span class="op"&gt;$&lt;/span&gt; launch &lt;span class="st"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-24"&gt;&lt;a href="#cb7-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Launched bob with ID &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;show&lt;/span&gt; bobId&lt;/span&gt;
&lt;span id="cb7-25"&gt;&lt;a href="#cb7-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    success &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; runCommand ref &lt;span class="op"&gt;$&lt;/span&gt; stop aliceId&lt;/span&gt;
&lt;span id="cb7-26"&gt;&lt;a href="#cb7-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-27"&gt;&lt;a href="#cb7-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;if&lt;/span&gt; success&lt;/span&gt;
&lt;span id="cb7-28"&gt;&lt;a href="#cb7-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;then&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;alice succesfully stopped&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-29"&gt;&lt;a href="#cb7-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;else&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;alice unsuccesfully stopped&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-30"&gt;&lt;a href="#cb7-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;print&lt;/span&gt; &lt;span class="op"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; readIORef ref&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Launched alice with ID 0
Launched bob with ID 1
alice succesfully stopped
fromList [(1, &amp;quot;bob&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s add a command to “query” a process id for its current status:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Launch&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)    &lt;span class="co"&gt;-- ^ takes a name, returns a process ID&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Stop&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)        &lt;span class="co"&gt;-- ^ takes a process ID, returns success/failure&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Query&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a)     &lt;span class="co"&gt;-- ^ takes a process ID, returns a status message&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;query ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;query pid &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Query&lt;/span&gt; pid &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;runCommand ::&lt;/span&gt; &lt;span class="dt"&gt;IORef&lt;/span&gt; (&lt;span class="dt"&gt;IntMap&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Command&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;runCommand ref &lt;span class="ot"&gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- ...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Query&lt;/span&gt; procId next &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        procName &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; IM.lookup procId &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; readIORef ref&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;pure&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; procName &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;This process doesn&amp;#39;t exist, silly.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;          &lt;span class="dt"&gt;Just&lt;/span&gt; n &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Process &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; n &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; chugging along...&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="relationship-with-unions"&gt;Relationship with Unions&lt;/h3&gt;
&lt;p&gt;To clarify a common confusion: sum types can be described as “tagged unions”:
you have a tag to indicate which branch you are on (which can be case-matched
on), and then the rest of your data is conditionally present.&lt;/p&gt;
&lt;p&gt;In many languages this can be implemented under the hood as a struct with a
tag and a union of data, along with some &lt;a
href="https://en.wikipedia.org/wiki/Visitor_pattern"&gt;abstract visitor pattern
interface&lt;/a&gt; to ensure exhaustiveness.&lt;/p&gt;
&lt;p&gt;Remember, it’s not &lt;em&gt;exactly&lt;/em&gt; a union, because, ie, consider a type
like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Entity&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An &lt;code&gt;Entity&lt;/code&gt; here could represent a user at a user id, or a post at
a post id. If we considered it purely as a union of &lt;code&gt;Int&lt;/code&gt; and
&lt;code&gt;Int&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode c"&gt;&lt;code class="sourceCode c"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;union&lt;/span&gt; Entity &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;int&lt;/span&gt; user_id&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;int&lt;/span&gt; post_id&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we’d lose the ability to branch on whether or not we have a user or an int.
If we have the tagged union, we recover the original tagged union semantics:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode c"&gt;&lt;code class="sourceCode c"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;struct&lt;/span&gt; Entity &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;bool&lt;/span&gt; is_user&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;union&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;int&lt;/span&gt; user_id&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;int&lt;/span&gt; post_id&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt; payload&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you still need an abstract interface like the visitor pattern to
actually be able to use this as a sum type with guarantees that you handle every
branch, but that’s a story for another day. Alternatively, if your language
supports dynamic dispatch nicely, that’s another underlying implementation that
would work to back a higher-level visitor pattern interface.&lt;/p&gt;
&lt;h2 id="subtypes-solve-a-different-problem"&gt;Subtypes Solve a Different
Problem&lt;/h2&gt;
&lt;p&gt;Now, sum types aren’t exactly a part of common programming education
curriculum, but &lt;em&gt;subtypes&lt;/em&gt; and &lt;em&gt;supertypes&lt;/em&gt; definitely were
drilled into every CS student’s brain and waking nightmares from their first
year.&lt;/p&gt;
&lt;p&gt;Informally (a la Liskov), &lt;code&gt;B&lt;/code&gt; is a subtype of &lt;code&gt;A&lt;/code&gt; (and
&lt;code&gt;A&lt;/code&gt; is a supertype of &lt;code&gt;B&lt;/code&gt;) if anywhere that expects an
&lt;code&gt;A&lt;/code&gt;, you could also provide a &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In normal object-oriented programming, this often shows up in early lessons
as &lt;code&gt;Cat&lt;/code&gt; and &lt;code&gt;Dog&lt;/code&gt; being subclasses of an
&lt;code&gt;Animal&lt;/code&gt; class, or &lt;code&gt;Square&lt;/code&gt; and &lt;code&gt;Circle&lt;/code&gt; being
subclasses of a &lt;code&gt;Shape&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;When people first learn about sum types, there is a tendency to understand
them as similar to subtyping. This is unfortunately understandable, since a lot
of introductions to sum types often start with something like&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | Bad Sum Type Example!&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Circle&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Rectangle&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are situations where this might be a good sum type (ie, for an
API specification or a state machine), on face-value this is a bad example on
the sum types vs. subtyping distinction.&lt;/p&gt;
&lt;p&gt;You might notice the essential “tension” of the sum type: you declare all of
your options up-front, the functions that consume your value are open and
declared ad-hoc. And, if you add new options, all of the consuming functions
must be adjusted.&lt;/p&gt;
&lt;p&gt;So, &lt;em&gt;subtypes&lt;/em&gt; (and supertypes) are more effective when they lean into
the opposite end: the universe of possible options are open and declared ad-hoc,
but the &lt;em&gt;consuming functions&lt;/em&gt; are closed. And, if you add new functions,
all of the members must be adjusted.&lt;/p&gt;
&lt;p&gt;In typed languages with a concept of “objects” and “classes”, subtyping is
often implemented using inheritance and interfaces.&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode java"&gt;&lt;code class="sourceCode java"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;interface&lt;/span&gt; Widget &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;void&lt;/span&gt; &lt;span class="fu"&gt;draw&lt;/span&gt;&lt;span class="op"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;void&lt;/span&gt; &lt;span class="fu"&gt;handleEvent&lt;/span&gt;&lt;span class="op"&gt;(&lt;/span&gt;&lt;span class="bu"&gt;String&lt;/span&gt; event&lt;span class="op"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="bu"&gt;String&lt;/span&gt; &lt;span class="fu"&gt;getName&lt;/span&gt;&lt;span class="op"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="bu"&gt;Button&lt;/span&gt; &lt;span class="kw"&gt;implements&lt;/span&gt; Widget &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ..&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; InputField &lt;span class="kw"&gt;implements&lt;/span&gt; Widget &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ..&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="bu"&gt;Box&lt;/span&gt; &lt;span class="kw"&gt;implements&lt;/span&gt; Widget &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-16"&gt;&lt;a href="#cb14-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ..&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-17"&gt;&lt;a href="#cb14-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, a function like &lt;code&gt;processWidget(Widget widget)&lt;/code&gt; that expects a
&lt;code&gt;Widget&lt;/code&gt; would be able to be passed a &lt;code&gt;Button&lt;/code&gt; or
&lt;code&gt;InputField&lt;/code&gt; or &lt;code&gt;Box&lt;/code&gt;. And, if you had a container like
&lt;code&gt;List&amp;lt;Widget&amp;gt;&lt;/code&gt;, you could assemble a structure using
&lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;InputField&lt;/code&gt;, and &lt;code&gt;Box&lt;/code&gt;. A perfect
Liskov storm.&lt;/p&gt;
&lt;p&gt;In typical library design, you’re able to add new implementations of
&lt;code&gt;Widget&lt;/code&gt; as an open universe easily: anyone that imports
&lt;code&gt;Widget&lt;/code&gt; can, and they can now use it with functions taking
&lt;code&gt;Widget&lt;/code&gt;s. &lt;em&gt;But&lt;/em&gt;, if you ever wanted to add new functionality
to the &lt;code&gt;Widget&lt;/code&gt; interface, that would be a breaking change to all
downstream implementations.&lt;/p&gt;
&lt;p&gt;However, this implementation of subtyping, while prevalent, is the most
mind-numbly boring realization of the concept, and it pained my soul to even
spend time talking about it. So let’s jump into the more interesting way that
subtype and supertype relationships manifest in the only language where anything
is interesting: Haskell.&lt;/p&gt;
&lt;h3 id="subtyping-via-parametric-polymorphism"&gt;Subtyping via Parametric
Polymorphism&lt;/h3&gt;
&lt;p&gt;In Haskell, subtyping is implemented in terms of parametric polymorphism and
sometimes typeclasses. This allows for us to work nicely with the concept of
functions and APIs as subtypes and supertypes of each other.&lt;/p&gt;
&lt;p&gt;For example, let’s look at a function that takes indexers and applies
them:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;sumAtLocs ::&lt;/span&gt; ([&lt;span class="dt"&gt;Double&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Double&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;sumAtLocs ixer xs &lt;span class="ot"&gt;=&lt;/span&gt; ixer xs &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; ixer xs &lt;span class="dv"&gt;2&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; ixer xs &lt;span class="dv"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; sumAtLocs (&lt;span class="op"&gt;!!&lt;/span&gt;) [&lt;span class="dv"&gt;1&lt;/span&gt;,&lt;span class="dv"&gt;2&lt;/span&gt;,&lt;span class="dv"&gt;3&lt;/span&gt;,&lt;span class="dv"&gt;4&lt;/span&gt;,&lt;span class="dv"&gt;5&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;14&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what functions could you pass to &lt;code&gt;sumAtLocs&lt;/code&gt;? Can you
&lt;em&gt;only&lt;/em&gt; pass &lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, not quite. Look at the above where we passed &lt;code&gt;(!!)&lt;/code&gt;, which
has type &lt;code&gt;forall a. [a] -&amp;gt; Int -&amp;gt; a&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;In fact, what other types could we pass? Here are some examples:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun1 ::&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun1 &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="op"&gt;!!&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun2 ::&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun2 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;reverse&lt;/span&gt; xs &lt;span class="op"&gt;!!&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun3 ::&lt;/span&gt; (&lt;span class="dt"&gt;Foldable&lt;/span&gt; t, &lt;span class="dt"&gt;Floating&lt;/span&gt; a) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-8"&gt;&lt;a href="#cb17-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun3 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; xs &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; i &lt;span class="kw"&gt;then&lt;/span&gt; xs &lt;span class="op"&gt;!!&lt;/span&gt; i &lt;span class="kw"&gt;else&lt;/span&gt; &lt;span class="fu"&gt;pi&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-9"&gt;&lt;a href="#cb17-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-10"&gt;&lt;a href="#cb17-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun4 ::&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-11"&gt;&lt;a href="#cb17-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun4 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;sum&lt;/span&gt; (&lt;span class="fu"&gt;take&lt;/span&gt; i xs)&lt;/span&gt;
&lt;span id="cb17-12"&gt;&lt;a href="#cb17-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-13"&gt;&lt;a href="#cb17-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun5 ::&lt;/span&gt; (&lt;span class="dt"&gt;Integral&lt;/span&gt; b, &lt;span class="dt"&gt;Num&lt;/span&gt; c) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id="cb17-14"&gt;&lt;a href="#cb17-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun5 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;fromIntegral&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb17-15"&gt;&lt;a href="#cb17-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-16"&gt;&lt;a href="#cb17-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun5 ::&lt;/span&gt; (&lt;span class="dt"&gt;Foldable&lt;/span&gt; t, &lt;span class="dt"&gt;Fractional&lt;/span&gt; a, &lt;span class="dt"&gt;Integral&lt;/span&gt; b) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-17"&gt;&lt;a href="#cb17-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun5 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;sum&lt;/span&gt; xs &lt;span class="op"&gt;/&lt;/span&gt; &lt;span class="fu"&gt;fromIntegral&lt;/span&gt; i&lt;/span&gt;
&lt;span id="cb17-18"&gt;&lt;a href="#cb17-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-19"&gt;&lt;a href="#cb17-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fun5 ::&lt;/span&gt; (&lt;span class="dt"&gt;Foldable&lt;/span&gt; t, &lt;span class="dt"&gt;Integral&lt;/span&gt; b, &lt;span class="dt"&gt;Floating&lt;/span&gt; a) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb17-20"&gt;&lt;a href="#cb17-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;fun5 xs i &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;logBase&lt;/span&gt; (&lt;span class="fu"&gt;fromIntegral&lt;/span&gt; i) (&lt;span class="fu"&gt;sum&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What’s going on here? Well, the function &lt;em&gt;expects&lt;/em&gt; a
&lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt;, but there are a lot of other types
that could be passed instead.&lt;/p&gt;
&lt;p&gt;At first this might seem like meaningless semantics or trickery, but it’s
deeper than that: remember that each of the above types actually has a very
different meaning and different possible behaviors!&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;code&gt;forall a. [a] -&amp;gt; Int -&amp;gt; a&lt;/code&gt; means that the &lt;code&gt;a&lt;/code&gt;
&lt;em&gt;must&lt;/em&gt; come from the given list. In fact, any function with that type is
guaranteed to be partial: if you pass it an empty list, there is no
&lt;code&gt;a&lt;/code&gt; available to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forall a. Num a =&amp;gt; [a] -&amp;gt; Int -&amp;gt; a&lt;/code&gt; means that the
result might actually come from outside of the list: the implementation could
always return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;, even if the list is empty. It
also guarantees that it will only add, subtract, multiply, or abs: it will never
divide.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forall a. Fractional a =&amp;gt; [a] -&amp;gt; Int -&amp;gt; a&lt;/code&gt; means that
we could possibly do division on the result, but we can’t do anything “floating”
like square rooting or logarithms.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forall a. Floating a =&amp;gt; [a] -&amp;gt; Int -&amp;gt; a&lt;/code&gt; means that we
can possibly start square rooting or taking the logarithms of our input
numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt; gives us the least guarantees
about the behavior: the result could come from thin air (and not be a part of
the list), and we can even inspect the machine representation of our
inputs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, we have all of these types with completely different semantics and
meanings. And yet, they can all be passed to something expecting a
&lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt;. That means that they are all
&lt;em&gt;subtypes&lt;/em&gt; of &lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt;!
&lt;code&gt;[Double] -&amp;gt; Int -&amp;gt; Double&lt;/code&gt; is a supertype that houses
multitudes of possible values, uniting all of the possible values and semantics
into one big supertype.&lt;/p&gt;
&lt;p&gt;Through the power of parametric polymorphism and typeclasses, you can
actually create an extensible hierarchy of &lt;em&gt;supertypes&lt;/em&gt;, not just of
subtypes.&lt;/p&gt;
&lt;p&gt;Consider a common API for json serialization. You could have multiple
functions that serialize into JSON:&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fooToJson ::&lt;/span&gt; &lt;span class="dt"&gt;Foo&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Value&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;barToJson ::&lt;/span&gt; &lt;span class="dt"&gt;Bar&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Value&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb18-3"&gt;&lt;a href="#cb18-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;bazToJson ::&lt;/span&gt; &lt;span class="dt"&gt;Baz&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Value&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Through typeclasses, you can create:&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toJSON ::&lt;/span&gt; &lt;span class="dt"&gt;ToJSON&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Value&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The type of &lt;code&gt;toJSON :: forall a. JSON a =&amp;gt; a -&amp;gt; Value&lt;/code&gt; is a
subtype of &lt;code&gt;Foo -&amp;gt; Value&lt;/code&gt;, &lt;code&gt;Bar -&amp;gt; Value&lt;/code&gt;, and
&lt;code&gt;Baz -&amp;gt; Value&lt;/code&gt;, because everywhere you would &lt;em&gt;want&lt;/em&gt; a
&lt;code&gt;Foo -&amp;gt; Value&lt;/code&gt;, you could give &lt;code&gt;toJSON&lt;/code&gt; instead. Every
time you &lt;em&gt;want&lt;/em&gt; to serialize a &lt;code&gt;Foo&lt;/code&gt;, you could use
&lt;code&gt;toJSON&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This usage works well, as it gives you an extensible abstraction to design
code around. When you write code polymorphic over &lt;code&gt;Monoid a&lt;/code&gt;, it
forces you to reason about your values with respect to only the aspects relating
to monoidness. If you write code polymorphic over &lt;code&gt;Num a&lt;/code&gt;, it forces
you to reason about your values only with respect to how they can be added,
subtracted, negated, or multiplied, instead of having to worry about things like
their machine representation.&lt;/p&gt;
&lt;p&gt;The extensibility comes from the fact that you can create &lt;em&gt;even more
supertypes&lt;/em&gt; of &lt;code&gt;forall a. ToJSON a =&amp;gt; a -&amp;gt; Value&lt;/code&gt; easily,
just by defining a new typeclass instance. So, if you need a
&lt;code&gt;MyType -&amp;gt; Value&lt;/code&gt;, you could &lt;em&gt;make&lt;/em&gt; it a supertype of
&lt;code&gt;toJSON :: ToJSON a =&amp;gt; a -&amp;gt; Value&lt;/code&gt; by defining an instance of
the &lt;code&gt;ToJSON&lt;/code&gt; typeclass, and now you have something you can use in its
place.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Practically&lt;/em&gt; this is used by many libraries. For example, &lt;a
href="https://hackage.haskell.org/package/ad"&gt;ad&lt;/a&gt; uses it for automatic
differentiation: its &lt;code&gt;diff&lt;/code&gt; function looks scary:&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;diff ::&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; s&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;AD&lt;/span&gt; s &lt;span class="dt"&gt;ForwardDouble&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;AD&lt;/span&gt; s &lt;span class="dt"&gt;ForwardDouble&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it relies on the fact that that
&lt;code&gt;(forall s. AD s ForwardDouble -&amp;gt; AD s ForwardDuble)&lt;/code&gt; is a
&lt;em&gt;superclass&lt;/em&gt; of &lt;code&gt;(forall a. Floating a =&amp;gt; a -&amp;gt; a)&lt;/code&gt;,
&lt;code&gt;(forall a. Num a =&amp;gt; a -&amp;gt; a)&lt;/code&gt;, etc., so you can give it
functions like &lt;code&gt;\x -&amp;gt; x * x&lt;/code&gt; (which is a
&lt;code&gt;forall a. Num a =&amp;gt; a -&amp;gt; a&lt;/code&gt;) and it will work as that
&lt;code&gt;AD s&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb21-1"&gt;&lt;a href="#cb21-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; diff (\x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; x &lt;span class="op"&gt;*&lt;/span&gt; x) &lt;span class="dv"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb21-2"&gt;&lt;a href="#cb21-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;20&lt;/span&gt;      &lt;span class="co"&gt;-- 2*x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This “numeric overloading” method is used by libraries for GPU programming,
as well, to accept numeric functions to be optimized and compiled to GPU
code.&lt;/p&gt;
&lt;p&gt;Another huge application is in the &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/lens"&gt;lens&lt;/a&gt;&lt;/em&gt; library, which
uses subtyping to unite its hierarchy of optics.&lt;/p&gt;
&lt;p&gt;For example, an &lt;code&gt;Iso&lt;/code&gt; is a subtype of &lt;code&gt;Traversal&lt;/code&gt; which
is a subtype of &lt;code&gt;Lens&lt;/code&gt;, and &lt;code&gt;Lens&lt;/code&gt; is a supertype of
&lt;code&gt;Fold&lt;/code&gt; and &lt;code&gt;Traversal&lt;/code&gt;, etc. In the end the system even
allows you to use &lt;code&gt;id&lt;/code&gt; from the &lt;em&gt;Prelude&lt;/em&gt; as a lens or a
traversal, because the type signature of &lt;code&gt;id :: a -&amp;gt; a&lt;/code&gt; is
actually a subtype of all of those types!&lt;/p&gt;
&lt;h3 id="subtyping-using-existential-types"&gt;Subtyping using Existential
Types&lt;/h3&gt;
&lt;p&gt;What more closely matches the &lt;em&gt;spirit&lt;/em&gt; of subtypes in OOP and other
languages is the &lt;em&gt;existential type&lt;/em&gt;: a value that can be a value of any
type matching some interface.&lt;/p&gt;
&lt;p&gt;For example, let’s imagine a value that could be any instance of
&lt;code&gt;Num&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb22-1"&gt;&lt;a href="#cb22-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb22-2"&gt;&lt;a href="#cb22-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb22-3"&gt;&lt;a href="#cb22-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;someNums ::&lt;/span&gt; [&lt;span class="dt"&gt;SomeNum&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb22-4"&gt;&lt;a href="#cb22-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;someNums &lt;span class="ot"&gt;=&lt;/span&gt; [&lt;span class="dt"&gt;SomeNum&lt;/span&gt; (&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;), &lt;span class="dt"&gt;SomeNum&lt;/span&gt; (&lt;span class="fu"&gt;pi&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;), &lt;span class="dt"&gt;SomeNum&lt;/span&gt; (&lt;span class="bn"&gt;0xfe&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Word&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;em&gt;somewhat&lt;/em&gt; equivalent to Java’s
&lt;code&gt;List&amp;lt;MyInterface&amp;gt;&lt;/code&gt; or &lt;code&gt;List&amp;lt;MyClass&amp;gt;&lt;/code&gt;, or
python’s &lt;code&gt;List[MyClass]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that to use this effectively in Haskell with superclasses and
subclasses, you need to manually wrap and unwrap:&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb23-1"&gt;&lt;a href="#cb23-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeFrational&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SumFractional&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb23-2"&gt;&lt;a href="#cb23-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb23-3"&gt;&lt;a href="#cb23-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;castUp ::&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SumNum&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb23-4"&gt;&lt;a href="#cb23-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;castUp (&lt;span class="dt"&gt;SomeFractional&lt;/span&gt; x) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, &lt;code&gt;SomeNum&lt;/code&gt; is “technically” a supertype of
&lt;code&gt;SomeFractional&lt;/code&gt;: everywhere a &lt;code&gt;SomeNum&lt;/code&gt; is expected, a
&lt;code&gt;SomeFractional&lt;/code&gt; can be given…but in Haskell it’s a lot less
convenient because you have to explicitly cast.&lt;/p&gt;
&lt;p&gt;In OOP languages, you can often cast “down” using runtime reflection
(&lt;code&gt;SomeNum -&amp;gt; Maybe SomeFractional&lt;/code&gt;). However, this is impossible
in Haskell the way we have written it!&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb24-1"&gt;&lt;a href="#cb24-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;castDown ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb24-2"&gt;&lt;a href="#cb24-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;castDown &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;impossible!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s because of type erasure: Haskell does not (by default) couple a value
at runtime with all of its associated interface implementations. When you create
a value of type &lt;code&gt;SomeNum&lt;/code&gt;, you are packing an untyped pointer to that
value as well as a “dictionary” of all the functions you could use it with:&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb25-1"&gt;&lt;a href="#cb25-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-2"&gt;&lt;a href="#cb25-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; (+) ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-3"&gt;&lt;a href="#cb25-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; (*) ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-4"&gt;&lt;a href="#cb25-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; negate ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-5"&gt;&lt;a href="#cb25-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; abs ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-6"&gt;&lt;a href="#cb25-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; fromInteger ::&lt;/span&gt; &lt;span class="dt"&gt;Integer&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-7"&gt;&lt;a href="#cb25-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb25-8"&gt;&lt;a href="#cb25-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-9"&gt;&lt;a href="#cb25-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;mkNumDict ::&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-10"&gt;&lt;a href="#cb25-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;mkNumDict &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt; (&lt;span class="op"&gt;+&lt;/span&gt;) (&lt;span class="op"&gt;*&lt;/span&gt;) &lt;span class="fu"&gt;negate&lt;/span&gt; &lt;span class="fu"&gt;abs&lt;/span&gt; &lt;span class="fu"&gt;fromInteger&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-11"&gt;&lt;a href="#cb25-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-12"&gt;&lt;a href="#cb25-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;FractionalDict&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;FractionalDict&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-13"&gt;&lt;a href="#cb25-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; numDict ::&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-14"&gt;&lt;a href="#cb25-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; (/) ::&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-15"&gt;&lt;a href="#cb25-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; fromRational ::&lt;/span&gt; &lt;span class="dt"&gt;Rational&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-16"&gt;&lt;a href="#cb25-16" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb25-17"&gt;&lt;a href="#cb25-17" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-18"&gt;&lt;a href="#cb25-18" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | Essentially equivalent to the previous &amp;#39;SomeNum&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-19"&gt;&lt;a href="#cb25-19" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-20"&gt;&lt;a href="#cb25-20" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; numDict ::&lt;/span&gt; &lt;span class="dt"&gt;NumDict&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-21"&gt;&lt;a href="#cb25-21" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; value ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-22"&gt;&lt;a href="#cb25-22" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb25-23"&gt;&lt;a href="#cb25-23" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-24"&gt;&lt;a href="#cb25-24" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- | Essentially equivalent to the previous &amp;#39;SomeFractional&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-25"&gt;&lt;a href="#cb25-25" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-26"&gt;&lt;a href="#cb25-26" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; fractionalDict ::&lt;/span&gt; &lt;span class="dt"&gt;FractionalDict&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-27"&gt;&lt;a href="#cb25-27" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; value ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb25-28"&gt;&lt;a href="#cb25-28" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb25-29"&gt;&lt;a href="#cb25-29" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-30"&gt;&lt;a href="#cb25-30" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;castUp ::&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-31"&gt;&lt;a href="#cb25-31" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;castUp (&lt;span class="dt"&gt;SomeFractional&lt;/span&gt; (&lt;span class="dt"&gt;FractionalDict&lt;/span&gt; {numDict}) x) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; d x&lt;/span&gt;
&lt;span id="cb25-32"&gt;&lt;a href="#cb25-32" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb25-33"&gt;&lt;a href="#cb25-33" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;castDown ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb25-34"&gt;&lt;a href="#cb25-34" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;castDown (&lt;span class="dt"&gt;SomeNum&lt;/span&gt; nd x) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;not possible!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these function pointers essentially exist at runtime &lt;em&gt;inside&lt;/em&gt;
the &lt;code&gt;SomeNum&lt;/code&gt;. So, &lt;code&gt;SomeFractional&lt;/code&gt; can be “cast up” to
&lt;code&gt;SomeNum&lt;/code&gt; by simply dropping the &lt;code&gt;FractionalDict&lt;/code&gt;.
However, you cannot “cast down” from &lt;code&gt;SomeNum&lt;/code&gt; because there is no
way to materialize the &lt;code&gt;FractionalDict&lt;/code&gt;: the association from type to
instance is lost at runtime. OOP languages usually get around this by having the
&lt;em&gt;value itself&lt;/em&gt; hold pointers to all of its interface implementations at
runtime. However, in Haskell, we have type erasure by default: there are no
tables carried around at runtime.&lt;a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the end, existential subtyping requires explicit wrapping/unwrapping
instead of implicit or lightweight casting possible in OOP languages optimized
around this sort of behavior.&lt;a href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Existential-based subtyping is just less
common in Haskell because parametric polymorphism offers a solution to most
similar problems. For more on this topic, Simon Peyton Jones has &lt;a
href="https://www.youtube.com/watch?v=6COvD8oynmI"&gt;a nice lecture&lt;/a&gt; on the
topic.&lt;/p&gt;
&lt;p&gt;The pattern of &lt;em&gt;using&lt;/em&gt; existentially qualified data in a container
(like &lt;code&gt;[SomeNum]&lt;/code&gt;) is often called the “widget pattern” because it’s
used in libraries like &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/xmonad"&gt;xmonad&lt;/a&gt;&lt;/em&gt; to allow
extensible “widgets” stored alongside the methods used to manipualte them. It’s
more common to explicitly store the handler functions (a “dictionary”) inside
the type instead of of existential typeclasses, but sometimes it can be nice to
let the compiler handle generating and passing your method tables implicitly for
you. Using existential typeclasses instead of explicit dictionaries also allows
you to bless certain methods and functions as “canonical” to your type, and the
compiler will make sure they are always coherent.&lt;/p&gt;
&lt;p&gt;I do mention in &lt;a
href="https://blog.jle.im/entry/levels-of-type-safety-haskell-lists.html"&gt;a blog
post about different types of existential lists&lt;/a&gt;, however, that this
“container of instances” type is much less useful in Haskell than in other
languages for many reasons, including the up/downcasting issues mentioned above.
In addition, Haskell gives you a whole wealth of functionality to operate over
homogeneous parameters (like &lt;code&gt;[a]&lt;/code&gt;, where all items have the same
type) that jumping to heterogeneous lists gives up so much.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s briefly take a moment to talk about how typeclass hierarchies give us
subtle subtype/supertype relationships.&lt;/p&gt;
&lt;p&gt;Let’s look at the classic &lt;code&gt;Num&lt;/code&gt; and &lt;code&gt;Fractional&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb26-1"&gt;&lt;a href="#cb26-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb26-2"&gt;&lt;a href="#cb26-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb26-3"&gt;&lt;a href="#cb26-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Num&lt;/code&gt; is a &lt;em&gt;superclass&lt;/em&gt; of &lt;code&gt;Fractional&lt;/code&gt;, and
&lt;code&gt;Fractional&lt;/code&gt; is a &lt;em&gt;subclass&lt;/em&gt; of &lt;code&gt;Num&lt;/code&gt;. Everywhere a
&lt;code&gt;Num&lt;/code&gt; constraint is required, you can provide a
&lt;code&gt;Fractional&lt;/code&gt; constraint to do the same thing.&lt;/p&gt;
&lt;p&gt;However, in these two types:&lt;/p&gt;
&lt;div class="sourceCode" id="cb27"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb27-1"&gt;&lt;a href="#cb27-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb27-2"&gt;&lt;a href="#cb27-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;forall a. Num a =&amp;gt; a&lt;/code&gt; is actually a &lt;em&gt;subclass&lt;/em&gt; of
&lt;code&gt;forall a. Fractional a =&amp;gt; a&lt;/code&gt;! That’s because if you need a
&lt;code&gt;forall a. Fractional a =&amp;gt; a&lt;/code&gt;, you can provide a
&lt;code&gt;forall a. Num a =&amp;gt; a&lt;/code&gt; instead. In fact, let’s look at three
levels: &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;forall a. Fractional a =&amp;gt; a&lt;/code&gt;, and
&lt;code&gt;forall a. Num a =&amp;gt; a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb28-1"&gt;&lt;a href="#cb28-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- can be used as `Double`&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-2"&gt;&lt;a href="#cb28-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fl"&gt;1.0&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-3"&gt;&lt;a href="#cb28-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fl"&gt;1.0&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb28-4"&gt;&lt;a href="#cb28-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb28-5"&gt;&lt;a href="#cb28-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb28-6"&gt;&lt;a href="#cb28-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- can be used as `forall a. Fractional a =&amp;gt; a`&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-7"&gt;&lt;a href="#cb28-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fl"&gt;1.0&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb28-8"&gt;&lt;a href="#cb28-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb28-9"&gt;&lt;a href="#cb28-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb28-10"&gt;&lt;a href="#cb28-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- can be used as `forall a. Num a =&amp;gt; a`&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb28-11"&gt;&lt;a href="#cb28-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, &lt;code&gt;Double&lt;/code&gt; is a supertype of &lt;code&gt;Fractional a =&amp;gt; a&lt;/code&gt;
is a supertype of &lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The general idea here is that the more super- you go, the more you “know”
about the actual term you are creating. So, with &lt;code&gt;Num a =&amp;gt; a&lt;/code&gt;, you
know the &lt;em&gt;least&lt;/em&gt; (and, you have the most possible actual terms because
there are more instances of &lt;code&gt;Num&lt;/code&gt; than of &lt;code&gt;Fractional&lt;/code&gt;).
And, with &lt;code&gt;Double&lt;/code&gt;, you know the &lt;em&gt;most&lt;/em&gt;: you even know its
machine representation!&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;Num&lt;/code&gt; is a superclass of &lt;code&gt;Fractional&lt;/code&gt; but
&lt;code&gt;forall a. Num a =&amp;gt; a&lt;/code&gt; is a subclass of
&lt;code&gt;forall a. Fractional a =&amp;gt; a&lt;/code&gt;. This actually follows the typical
rules of subtyping: if something appears on the “left” of an arrow
(&lt;code&gt;=&amp;gt;&lt;/code&gt; in this case), it gets flipped from sub- to super-. We often
call the left side a “negative” (contravariant) position and the right side a
“positive” position, because a negative of a negative (the left side of a left
size, like &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;(a -&amp;gt; b) -&amp;gt; c&lt;/code&gt;) is a
positive.&lt;/p&gt;
&lt;p&gt;Also note that our “existential wrappers”:&lt;/p&gt;
&lt;div class="sourceCode" id="cb29"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb29-1"&gt;&lt;a href="#cb29-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; a&lt;/span&gt;
&lt;span id="cb29-2"&gt;&lt;a href="#cb29-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be CPS-transformed to their equivalent types:&lt;/p&gt;
&lt;div class="sourceCode" id="cb30"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb30-1"&gt;&lt;a href="#cb30-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Num&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-2"&gt;&lt;a href="#cb30-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;SomeFractional&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; r&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Fractional&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id="cb30-3"&gt;&lt;a href="#cb30-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-4"&gt;&lt;a href="#cb30-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toSomeNum&amp;#39; ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-5"&gt;&lt;a href="#cb30-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;toSomeNum&amp;#39; (&lt;span class="dt"&gt;SomeNum&lt;/span&gt; x) f &lt;span class="ot"&gt;=&lt;/span&gt; f x&lt;/span&gt;
&lt;span id="cb30-6"&gt;&lt;a href="#cb30-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb30-7"&gt;&lt;a href="#cb30-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toSomeNum ::&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&amp;#39;&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;SomeNum&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb30-8"&gt;&lt;a href="#cb30-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;toSomeNum sn &lt;span class="ot"&gt;=&lt;/span&gt; sn &lt;span class="dt"&gt;SomeNum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in those cases, &lt;code&gt;Num&lt;/code&gt; and &lt;code&gt;Fractional&lt;/code&gt; again appear
in the covariant (positive) position, since they’re the negative of negative.
So, this aligns with our intuition that &lt;code&gt;SomeFractional&lt;/code&gt; is a subtype
of &lt;code&gt;SomeNum&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="the-expression-problem"&gt;The Expression Problem&lt;/h2&gt;
&lt;p&gt;This tension that I described earlier is closely related to &lt;a
href="https://en.wikipedia.org/wiki/Expression_problem"&gt;the expression
problem&lt;/a&gt;, and is a tension that is inherent to a lot of different aspects of
language and abstraction design. However, in the context laid out in this post,
it serves as a good general guide to decide what pattern to go down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you expect a canonical set of “inhabitants” and an open set of
“operations”, sum types can suit that end of the spectrum well.&lt;/li&gt;
&lt;li&gt;If you expect a canonical set of “operations” and an open set of
“inhabitants”, consider subtyping and supertyping.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don’t really think of the expression problem as a “problem” in the sense of
“some hindrance to deal with”. Instead, I see it in the “math problem” sort of
way: by adjusting how you approach things, you can play with the equation make
the most out of what requirements you need in your design.&lt;/p&gt;
&lt;h2 id="looking-forward"&gt;Looking Forward&lt;/h2&gt;
&lt;p&gt;A lot of frustration in Haskell (and programming in general) lies in trying
to force abstraction and tools to work in a way they weren’t meant to. Hopefully
this short run-down can help you avoid going &lt;em&gt;against&lt;/em&gt; the point of these
design patterns and start making the most of what they can offer. Happy
Haskelling!&lt;/p&gt;
&lt;h2 id="special-thanks"&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it
possible for me to devote time to researching and writing these posts. Very
special thanks to my supporter at the “Amazing” level on &lt;a
href="https://www.patreon.com/justinle/overview"&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;code&gt;?&lt;/code&gt;&lt;a href="#fnref1" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Must OOP languages also have mechanisms for type erasure, but
the &lt;em&gt;default&lt;/em&gt; is unerased, which is opposite of Haskell.&lt;a href="#fnref2"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Note that there are current &lt;a
href="https://github.com/ghc-proposals/ghc-proposals/pull/473"&gt;GHC proposals&lt;/a&gt;
that attempt to allow “naked” existentials without newtype wrappers, so we could
actually get the same seamless and implicit up-casting as we would get in OOP
languages. However, the jury is out on whether or not this is a good idea.&lt;a
href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/sum-types-and-subtypes-and-unions.html</guid><pubDate>Thu,  6 Mar 2025 17:25:28 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2025-03-06</date></item><item><title>Advent of Code 2024: Haskell Solution Reflections for all 25 Days</title><link>https://blog.jle.im/entry/advent-of-code-2024.html</link><description>&lt;p&gt;Admittedly a bit late, buuuuuut Merry belated Christmas and Happy New Years
to all!&lt;/p&gt;
&lt;p&gt;This past December I again participated in Eric Wastl’s &lt;a
href="http://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;, a series of 25 daily
Christmas-themed puzzles. Each puzzle comes with a cute story about saving
Christmas, and the puzzles increase in difficulty as the stakes get higher and
higher. Every night at midnight EST, my friends and I (including the good people
of libera chat’s &lt;code&gt;##advent-of-code&lt;/code&gt; channel) discuss the latest
puzzle and creative ways to solve and optimize it. But, the main goal isn’t to
solve it quickly, it’s always to see creative ways to approach the puzzle and
share different insights. The puzzles are bite-sized enough that there are often
multiple ways to approach it, and in the past I’ve leveraged &lt;a
href="https://blog.jle.im/entry/alchemical-groups.html"&gt;group theory&lt;/a&gt;, &lt;a
href="https://blog.jle.im/entry/shifting-the-stars.html"&gt;galilean
transformations and linear algebra&lt;/a&gt;, and &lt;a
href="https://blog.jle.im/entry/shuffling-things-up.html"&gt;more group theory&lt;/a&gt;.
This year was also the special 10 year anniversary event, with callbacks to fun
story elements of all the previous years!&lt;/p&gt;
&lt;p&gt;Most of the puzzles are also pretty nice to solve in Haskell! Lots of DFS’s
that melt away as simple recursion or recursion schemes, and even the BFS’s that
expose you to different data structures and encodings.&lt;/p&gt;
&lt;p&gt;This year I’ve moved &lt;em&gt;almost&lt;/em&gt; all of my Haskell code to &lt;a
href="https://github.com/mstksg/advent-of-code"&gt;an Advent of Code Megarepo&lt;/a&gt;.
I also like to post write-ups on Haskelly ways to approach the problems, and
they are auto-compiled on the &lt;a
href="https://github.com/mstksg/advent-of-code/wiki"&gt;megarepo wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I try my best every year, but sometimes I am able to complete write-ups for
all 25 puzzles before the new year catches up. The last time was &lt;a
href="https://blog.jle.im/entry/advent-of-code-2020.html"&gt;2020&lt;/a&gt;, and I’m
proud to announce that 2024 is now also 100% complete!&lt;/p&gt;
&lt;p&gt;You can find &lt;a
href="https://github.com/mstksg/advent-of-code/wiki/Reflections-2024"&gt;all of
them here&lt;/a&gt;, but here are links to each individual one. Hopefully you can find
them helpful. And if you haven’t yet, why not try &lt;a
href="http://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; yourself? :) And drop by the
freenode &lt;code&gt;##advent-of-code&lt;/code&gt; channel, we’d love to say hi and chat, or
help out! Thanks all for reading, and also thanks to Eric for a great event this
year, as always!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day01.md"&gt;Day
1 - Historian Hysteria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day02.md"&gt;Day
2 - Red-Nosed Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day03.md"&gt;Day
3 - Mull It Over&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day04.md"&gt;Day
4 - Ceres Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day05.md"&gt;Day
5 - Print Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day06.md"&gt;Day
6 - Guard Gallivant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day07.md"&gt;Day
7 - Bridge Repair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day08.md"&gt;Day
8 - Resonant Collinearity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day09.md"&gt;Day
9 - Disk Fragmenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day10.md"&gt;Day
10 - Hoof It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day11.md"&gt;Day
11 - Plutonian Pebbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day12.md"&gt;Day
12 - Garden Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day13.md"&gt;Day
13 - Claw Contraption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day14.md"&gt;Day
14 - Restrom Redoubt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day15.md"&gt;Day
15 - Warehouse Woes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day16.md"&gt;Day
16 - Reindeer Maze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day17.md"&gt;Day
17 - Chronospatial Computer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day18.md"&gt;Day
18 - RAM Run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day19.md"&gt;Day
19 - Linen Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day20.md"&gt;Day
20 - Race Condition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day21.md"&gt;Day
21 - Keypad Conundrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day22.md"&gt;Day
22 - Monkey Market&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day23.md"&gt;Day
23 - LAN Party&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day24.md"&gt;Day
24 - Crossed Wires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
href="https://github.com/mstksg/advent-of-code/blob/main/reflections/2024/day25.md"&gt;Day
25 - Code Chronicle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/advent-of-code-2024.html</guid><pubDate>Tue, 21 Jan 2025 07:54:15 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2025-01-21</date></item><item><title>Functors to Monads: A Story of Shapes</title><link>https://blog.jle.im/entry/functors-to-monads-a-story-of-shapes.html</link><description>&lt;p&gt;For many years now I’ve been using a mental model and intuition that has
guided me well for understanding and teaching and using functors, applicatives,
monads, and other related Haskell abstractions, as well as for approaching
learning new ones. Sometimes when teaching Haskell I talk about this concept and
assume everyone already has heard it, but I realize that it’s something
universal yet easy to miss depending on how you’re learning it. So, here it is:
how I understand the Functor and other related abstractions and free
constructions in Haskell.&lt;/p&gt;
&lt;p&gt;The crux is this: instead of thinking about what &lt;code&gt;fmap&lt;/code&gt; changes,
ask: what does &lt;code&gt;fmap&lt;/code&gt; keep &lt;em&gt;constant&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;This isn’t a rigorous understanding and isn’t going to explain &lt;em&gt;every&lt;/em&gt;
aspect about &lt;em&gt;every&lt;/em&gt; Functor, and will probably only be useful if you
already know a little bit about Functors in Haskell. But it’s a nice intuition
trick that has yet to majorly mislead me.&lt;/p&gt;
&lt;h2 id="the-secret-of-functors"&gt;The Secret of Functors&lt;/h2&gt;
&lt;p&gt;First of all, &lt;em&gt;what is a Functor&lt;/em&gt;? A capital-F Functor, that is, the
Haskell typeclass and abstraction. Ask a random Haskeller on the street and
they’ll tell you that it’s something that can be “mapped over”, like a list or
an optional. Maybe some of those random Haskellers will feel compelled to
mention that this mapping should follow some laws…they might even list the laws.
Ask them why these laws are so important and maybe you’ll spend a bit of time on
this rhetorical street of Haskellers before finding one confident enough to give
an answer.&lt;/p&gt;
&lt;p&gt;So I’m going to make a bit of a tautological leap: a &lt;em&gt;Functor&lt;/em&gt; gives
you a way to “map over” values in a way that &lt;em&gt;preserves shape&lt;/em&gt;. And what
is “shape”? A shape is &lt;em&gt;the thing that fmap preserves&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Functor typeclass is simple enough: for &lt;code&gt;Functor f&lt;/code&gt;, you have
a function &lt;code&gt;fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;, along with
&lt;code&gt;fmap id = id&lt;/code&gt; and &lt;code&gt;fmap f . fmap g = fmap (f . g)&lt;/code&gt;. Cute
things you can drop into quickcheck to prove for your instance, but it seems
like those laws are hiding some sort of deeper, fundamental truth.&lt;/p&gt;
&lt;p&gt;The more Functors you learn about, the more you see that &lt;code&gt;fmap&lt;/code&gt;
seems to always preserve “something”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For lists, &lt;code&gt;fmap&lt;/code&gt; preserves length and relative orderings.&lt;/li&gt;
&lt;li&gt;For optionals (&lt;code&gt;Maybe&lt;/code&gt;), &lt;code&gt;fmap&lt;/code&gt; preserves
&lt;em&gt;presence&lt;/em&gt; (the fact that something is there or not). It cannot flip a
&lt;code&gt;Just&lt;/code&gt; to a &lt;code&gt;Nothing&lt;/code&gt; or vice versa.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Either e&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves &lt;em&gt;the error&lt;/em&gt;
(if it exists) or the fact that it was succesful.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Map k&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves &lt;em&gt;the keys&lt;/em&gt;: which
keys exist, how many there are, their relative orderings, etc.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;IO&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves &lt;em&gt;the IO effect&lt;/em&gt;.
Every bit of external I/O that an IO action represents is unchanged by an
&lt;code&gt;fmap&lt;/code&gt;, as well as exceptions.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Writer w&lt;/code&gt; or &lt;code&gt;(,) w&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves
the “logged” &lt;code&gt;w&lt;/code&gt; value, leaving it unchanged. Same for
&lt;code&gt;Const w&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Tree&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves &lt;em&gt;the tree
structure&lt;/em&gt;: how many layers, how big they are, how deep they are, etc.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;State s&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves what happens to the
input state &lt;code&gt;s&lt;/code&gt;. How a &lt;code&gt;State s&lt;/code&gt; transform a state value
&lt;code&gt;s&lt;/code&gt; is unchanged by &lt;code&gt;fmap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;ConduitT i o m&lt;/code&gt; from &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/conduit"&gt;conduit&lt;/a&gt;&lt;/em&gt;,
&lt;code&gt;fmap&lt;/code&gt; preserves what the conduit pulls upstream and what it yields
downstream. &lt;code&gt;fmap&lt;/code&gt; will not cause the conduit to yield more or
different objects, nor cause it to consume/pull more or less.&lt;/li&gt;
&lt;li&gt;For parser-combinator &lt;code&gt;Parser&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt; preserves what
input is consumed or would fail to be consumed. &lt;code&gt;fmap&lt;/code&gt; cannot change
whether an input string would fail or succeed, and it cannot change how much it
consumes.&lt;/li&gt;
&lt;li&gt;For &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/optparse-applicative"&gt;optparse-applicative&lt;/a&gt;&lt;/em&gt;
&lt;code&gt;Parser&lt;/code&gt;s, &lt;code&gt;fmap&lt;/code&gt; preserves the command line arguments
available. It leaves the &lt;code&gt;--help&lt;/code&gt; message of your program
unchanged.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It seems like as soon as you define a &lt;code&gt;Functor&lt;/code&gt; instance, or as
soon as you find out that some type has a &lt;code&gt;Functor&lt;/code&gt; instance, it
magically induces some sort of … “thing” that must be preserved.&lt;a href="#fn1"
class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; A
&lt;em&gt;conserved quantity must exist&lt;/em&gt;. It reminds me a bit of &lt;a
href="https://en.wikipedia.org/wiki/Noether%27s_theorem"&gt;Noether’s Theorem&lt;/a&gt;
in Physics, where any continuous symmetry “induces” a conserved quantity (like
how translation symmetry “causes” conservation of momentum). In Haskell, every
lawful &lt;code&gt;Functor&lt;/code&gt; instance induces a conserved quantity. I don’t know
if there is a canonical name for this conserved quantity, but I like to call it
“shape”.&lt;/p&gt;
&lt;h2 id="a-story-of-shapes"&gt;A Story of Shapes&lt;/h2&gt;
&lt;p&gt;The word “shape” is chosen to be as devoid of external baggage/meaning as
possible while still having &lt;em&gt;some&lt;/em&gt;. The word isn’t important as much as
saying that there is &lt;em&gt;some&lt;/em&gt; “thing” preserved by &lt;code&gt;fmap&lt;/code&gt;, and
not exactly the nature of that “thing”. The &lt;em&gt;nature&lt;/em&gt; of that thing
changes a lot from Functor to Functor, where we might better call it an “effect”
or a “structure” specifically, but that &lt;em&gt;some&lt;/em&gt; “thing” exists is almost
universal.&lt;/p&gt;
&lt;p&gt;Of course, the value if this “thing” having a canonical name at all is
debatable. I were to coin a completely new term I might call it a “conserved
charge” or “gauge” in allusion to physics. But the most useful name probably
would be shape.&lt;/p&gt;
&lt;p&gt;For some &lt;code&gt;Functor&lt;/code&gt; instances, the word shape is more literal than
others. For trees, for instance, you have the literal shape of the tree
preserved. For lists, the “length” could be considered a literal shape.
&lt;code&gt;Map k&lt;/code&gt;’s shape is also fairly literal: it describes the structure of
keys that exist in the map. But for &lt;code&gt;Writer w&lt;/code&gt; and
&lt;code&gt;Const w&lt;/code&gt;, shape can be interpreted as some information outside of
the values you are mapping that is left unchanged by mapping. For
&lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Either e&lt;/code&gt; shape also considers if there has
been any short-circuiting. For &lt;code&gt;State s&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt; and
&lt;code&gt;Parser&lt;/code&gt;, “shape” involves some sort of side-computation or
consumption that is left unchanged by &lt;code&gt;fmap&lt;/code&gt;, often called an effect.
For &lt;em&gt;optparse-applicative&lt;/em&gt;, “shape” involves some sort of inspectable and
observable static aspects of a program. “Shape” comes in all forms.&lt;/p&gt;
&lt;p&gt;But, this intuition of “looking for that conserved quantity” is very helpful
for learning &lt;em&gt;new&lt;/em&gt; Functors. If you stumble onto a new type that you know
is a &lt;code&gt;Functor&lt;/code&gt; instance, you can immediately ask “What &lt;em&gt;shape&lt;/em&gt;
is this &lt;code&gt;fmap&lt;/code&gt; preserving?”, and it will almost always yield insight
into that type.&lt;/p&gt;
&lt;p&gt;This viewpoint also sheds insight onto why &lt;code&gt;Set.map&lt;/code&gt; isn’t a good
candidate for &lt;code&gt;fmap&lt;/code&gt; for &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/containers/docs/Data-Set.html"&gt;Data.Set&lt;/a&gt;&lt;/em&gt;:
What “thing” does &lt;code&gt;Set.map f&lt;/code&gt; preserve? Not size, for sure. In a
hypothetical world where we had
&lt;code&gt;ordfmap :: Ord b =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;, we would
still need &lt;code&gt;Set.map&lt;/code&gt; to preserve &lt;em&gt;something&lt;/em&gt; for it to be
useful as an “Ord-restricted Functor”.&lt;a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="a-result"&gt;A Result&lt;/h3&gt;
&lt;p&gt;Before we move on, let’s look at another related and vague concept that is
commonly used when discussing functors: &lt;code&gt;fmap&lt;/code&gt; is a way to map a
function that &lt;em&gt;preserves the shape&lt;/em&gt; and &lt;em&gt;changes the result&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;shape&lt;/em&gt; is the thing that is &lt;em&gt;preserved&lt;/em&gt; by
&lt;code&gt;fmap&lt;/code&gt;, &lt;em&gt;result&lt;/em&gt; is the thing that is &lt;em&gt;changed&lt;/em&gt; by it.
&lt;code&gt;fmap&lt;/code&gt; cleanly splits the two.&lt;/p&gt;
&lt;p&gt;Interestingly, most introduction to Functors begin with describing functor
values as having a result and &lt;code&gt;fmap&lt;/code&gt; as the thing that changes it, in
some way. Ironically, though it’s a more common term, it’s by far the more vague
and hard-to-intuit concept.&lt;/p&gt;
&lt;p&gt;For something like &lt;code&gt;Maybe&lt;/code&gt;, “result” is easy enough: it’s the
value present if it exists. For parser-combinator &lt;code&gt;Parser&lt;/code&gt;s too it’s
relatively simple: the “shape” is the input consumed but the “result” is the
Haskell value you get as a result of the consumption. For
&lt;em&gt;optparse-applicative&lt;/em&gt; parser, it’s the actual parsed command line
arguments given by the user at runtime. But sometimes it’s more complicated: for
the technical List functor, the “non-determinism” functor, the “shape” is the
number of options to choose from and the order you get them in, and the “result”
(to use precise semantics) is the non-deterministic choice that you eventually
pick or iterate over.&lt;/p&gt;
&lt;p&gt;So, the “result” can become a bit confusing to generalize. So, in my mind, I
usually reduce the definitions to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Shape&lt;/em&gt;: the “thing” that &lt;code&gt;fmap&lt;/code&gt; preserves: the
&lt;code&gt;f&lt;/code&gt; in &lt;code&gt;f a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Result&lt;/em&gt;: the “thing” that &lt;code&gt;fmap&lt;/code&gt; changes: the
&lt;code&gt;a&lt;/code&gt; in &lt;code&gt;f a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this you could “derive” the Functor laws:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fmap id == id&lt;/code&gt;: &lt;code&gt;fmap&lt;/code&gt; leaves the shape unchanged,
&lt;code&gt;id&lt;/code&gt; leaves the result unchanged. So entire thing must remain
unchanged!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmap f . fmap g == fmap (f . g)&lt;/code&gt;. In both cases the shape
remains unchanged, but one changes the result by f after g, and the other
changes the result by &lt;code&gt;f . g&lt;/code&gt;. They must be the same
transformation!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All neat and clean, right? So, maybe the big misdirection is focusing too
much on the “result” when learning Functors, when we &lt;em&gt;should&lt;/em&gt; really be
focusing more on the “shape”, or at least the two together.&lt;/p&gt;
&lt;p&gt;Once you internalize “&lt;code&gt;Functor&lt;/code&gt; gives you shape-preservation”,
this helps you understand the value of the other common typeclass abstractions
in Haskell as well, and how they function based on how they manipulate “shape”
and “result”.&lt;/p&gt;
&lt;h2 id="traversable"&gt;Traversable&lt;/h2&gt;
&lt;p&gt;For example, what does the &lt;code&gt;Traversable&lt;/code&gt; typeclass give us? Well,
if &lt;code&gt;Functor&lt;/code&gt; gives us a way to map &lt;em&gt;pure&lt;/em&gt; functions and
preserve shape, then &lt;code&gt;Traversable&lt;/code&gt; gives us a way to map
&lt;em&gt;effectful&lt;/em&gt; functions and preserve shape.&lt;/p&gt;
&lt;p&gt;Whenever someone asks me about my favorite &lt;code&gt;Traversable&lt;/code&gt; instance,
I always say it’s the &lt;code&gt;Map k&lt;/code&gt; traversable:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;traverse&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Applicative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Map&lt;/span&gt; k a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (&lt;span class="dt"&gt;Map&lt;/span&gt; k b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how it has no constraints on &lt;code&gt;k&lt;/code&gt;? Amazing isn’t it?
&lt;code&gt;Map k b&lt;/code&gt; lets us map an &lt;code&gt;(a -&amp;gt; f b)&lt;/code&gt; over the values
at each key in a map, and collects the results under the key the &lt;code&gt;a&lt;/code&gt;
was originally under.&lt;/p&gt;
&lt;p&gt;In essence, you can be assured that the result map has the &lt;em&gt;same keys&lt;/em&gt;
as the original map, perfectly preserving the “shape” of the map. The
&lt;code&gt;Map k&lt;/code&gt; instance is the epitome of beautiful &lt;code&gt;Traversable&lt;/code&gt;
instances. We can recognize this by identifying the “shape” that
&lt;code&gt;traverse&lt;/code&gt; is forced to preserve.&lt;/p&gt;
&lt;h2 id="applicative"&gt;Applicative&lt;/h2&gt;
&lt;p&gt;What does the &lt;code&gt;Applicative&lt;/code&gt; typeclass give us? It has
&lt;code&gt;ap&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt;, but &lt;a
href="https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative"&gt;its
laws&lt;/a&gt; are infamously difficult to understand.&lt;/p&gt;
&lt;p&gt;But, look at &lt;code&gt;liftA2 (,)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;liftA2 (,)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Applicative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (a, b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It lets us take “two things” and &lt;em&gt;combine their shapes&lt;/em&gt;. And, more
importantly, it combines the shapes &lt;em&gt;without considering the
results&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;Writer w&lt;/code&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; lets us combine the two
logged values using &lt;code&gt;mappend&lt;/code&gt; while ignoring the actual
&lt;code&gt;a&lt;/code&gt;/&lt;code&gt;b&lt;/code&gt; results.&lt;/li&gt;
&lt;li&gt;For list, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; (the cartesian product) lets us multiply
the lengths of the input lists together. The &lt;em&gt;length&lt;/em&gt; of the new list
ignores the actual &lt;em&gt;contents&lt;/em&gt; of the list.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;State s&lt;/code&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; lets you &lt;em&gt;compose&lt;/em&gt;
the &lt;code&gt;s -&amp;gt; s&lt;/code&gt; state functions together, ignoring the
&lt;code&gt;a&lt;/code&gt;/&lt;code&gt;b&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Parser&lt;/code&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; lets you sequence input
consumption in a way that doesn’t depend on the actual values you parse: it’s
“context-free” in a sense, aside from &lt;a
href="https://byorgey.wordpress.com/2012/01/05/parsing-context-sensitive-languages-with-applicative/"&gt;some
caveats&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;em&gt;optparse-applicative&lt;/em&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; lets you combine
your command line argument specs together, without depending on the actual
values provided at runtime by the caller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key takeaway is that the “final shape” &lt;em&gt;only depends&lt;/em&gt; on the input
shapes, and not the results. You can know the length of
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;-ing two lists together with only knowing the length of
the input lists, and you can also know the relative ordering of inputs to
outputs. Within the specific context of the semantics of &lt;code&gt;IO&lt;/code&gt;, you
can know what “effect” &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;-ing two IO actions would produce
only knowing the effects of the input IO actions&lt;a href="#fn3"
class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;. You can
know what command line arguments &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;-ing two
&lt;em&gt;optparse-applicative&lt;/em&gt; parsers would have only knowing the command line
arguments in the input parsers. You can know what strings
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;-ing two parser-combinator parsers would consume or
reject, based only on the consumption/rejection of the input parsers. You can
know the final log of &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;-ing two &lt;code&gt;Writer w a&lt;/code&gt;s
together by only knowing the logs of the input writer actions.&lt;/p&gt;
&lt;p&gt;And hey…some of these combinations feel “monoidal”, don’t they?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Writer w&lt;/code&gt; sequences using &lt;code&gt;mappend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List lengths sequence by multiplication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State s&lt;/code&gt; functions sequence by composition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also imagine “no-op” actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Writer w&lt;/code&gt;’s no-op action would log &lt;code&gt;mempty&lt;/code&gt;, the
identity of &lt;code&gt;mappend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List’s no-op action would have a length 1, the identity of
multiplication&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State s&lt;/code&gt;’s no-op action would be &lt;code&gt;id&lt;/code&gt;, the identity
of function composition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That might sound familiar — these are all &lt;code&gt;pure&lt;/code&gt; from the
&lt;code&gt;Applicative&lt;/code&gt; typeclass!&lt;/p&gt;
&lt;p&gt;So, the Applicative typeclass laws aren’t that mysterious at all. If you
understand the “shape” that a Functor induces, &lt;code&gt;Applicative&lt;/code&gt; gives
you a &lt;em&gt;monoid&lt;/em&gt; on that shape! This is why &lt;code&gt;Applicative&lt;/code&gt; is
often called the “higher-kinded” &lt;code&gt;Monoid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This intuition takes you pretty far, I believe. Look at the examples above
where we clearly identify specific &lt;code&gt;Applicative&lt;/code&gt; instances with
specific &lt;code&gt;Monoid&lt;/code&gt; instances (&lt;code&gt;Monoid w&lt;/code&gt;,
&lt;code&gt;Monoid (Product Int)&lt;/code&gt;, &lt;code&gt;Monoid (Endo s)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Put in code:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- A part of list&amp;#39;s shape is its length and the monoid is (*, 1)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (xs &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; ys) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; xs &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; ys&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Maybe&amp;#39;s shape is isJust and the monoid is (&amp;amp;&amp;amp;, True)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust (mx &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; my) &lt;span class="op"&gt;==&lt;/span&gt; isJust mx &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; isJust my&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- State&amp;#39;s shape is execState and the monoid is (flip (.), id)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;execState (sx &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; sy) &lt;span class="op"&gt;==&lt;/span&gt; execState sy &lt;span class="op"&gt;.&lt;/span&gt; execState sx&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;execState (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Writer&amp;#39;s shape is execWriter and the monoid is (&amp;lt;&amp;gt;, mempty)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;execWriter (wx &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; wy) &lt;span class="op"&gt;==&lt;/span&gt; execWriter wx &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; execWriter wy&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;execWriter (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;mempty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also extend this to non-standard &lt;code&gt;Applicative&lt;/code&gt; instances:
the &lt;code&gt;ZipList&lt;/code&gt; newtype wrapper gives us an &lt;code&gt;Applicative&lt;/code&gt;
instance for lists where &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; is &lt;code&gt;zipWith&lt;/code&gt;. These
two have the same &lt;code&gt;Functor&lt;/code&gt; instances, so their “shape” (length) is
the same. And for both the normal &lt;code&gt;Applicative&lt;/code&gt; and the
&lt;code&gt;ZipList&lt;/code&gt; &lt;code&gt;Applicative&lt;/code&gt;, you can know the length of the
result based on the lengths of the input, but &lt;code&gt;ZipList&lt;/code&gt; combines
shapes using the &lt;code&gt;Min&lt;/code&gt; monoid, instead of the &lt;code&gt;Product&lt;/code&gt;
monoid. And the identity of &lt;code&gt;Min&lt;/code&gt; is positive infinity, so
&lt;code&gt;pure&lt;/code&gt; for &lt;code&gt;ZipList&lt;/code&gt; is an infinite list.&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- A part of ZipList&amp;#39;s shape is length and its monoid is (min, infinity)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (xs &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; ys) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; xs &lt;span class="ot"&gt;`min`&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; ys&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="op"&gt;==&lt;/span&gt; infinity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The “know-the-shape-without-knowing-the-results” property is actually
leveraged by many libraries. It’s how &lt;em&gt;optparse-applicative&lt;/em&gt; can give you
&lt;code&gt;--help&lt;/code&gt; output: the &lt;em&gt;shape&lt;/em&gt; of the optparse-applicative
parser (the command line arguments list) can be computed &lt;em&gt;without knowing the
results&lt;/em&gt; (the actual arguments themselves at runtime). You can list out what
arguments are expecting without ever getting any input from the user.&lt;/p&gt;
&lt;p&gt;This is also leveraged by the &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/async"&gt;async&lt;/a&gt;&lt;/em&gt; library to give
us the &lt;code&gt;Concurrently&lt;/code&gt; &lt;code&gt;Applicative&lt;/code&gt; instance. Normally
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; for IO gives us sequential combination of IO effects.
But, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; for &lt;code&gt;Concurrently&lt;/code&gt; gives us
&lt;em&gt;parallel&lt;/em&gt; combination of IO effects. We can launch all of the IO effects
in parallel at the same time because &lt;em&gt;we know what the IO effects are&lt;/em&gt;
before we actually have to execute them to get the results. If we needed to know
the results, this wouldn’t be possible.&lt;/p&gt;
&lt;p&gt;This also gives some insight into the &lt;a
href="https://hackage.haskell.org/package/transformers-0.6.1.2/docs/Control-Applicative-Backwards.html"&gt;&lt;code&gt;Backwards&lt;/code&gt;
Applicative wrapper&lt;/a&gt; — because the shape of the final does not depend on the
&lt;em&gt;result&lt;/em&gt; of either, we are free to combine the shapes in whatever order
we want. In the same way that every monoid gives rise to &lt;a
href="https://hackage.haskell.org/package/base-4.20.0.1/docs/Data-Monoid.html#t:Dual"&gt;a
“backwards” monoid&lt;/a&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="st"&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; getDual &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Dual&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Dual&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="st"&gt;&amp;quot;worldhello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Every &lt;code&gt;Applicative&lt;/code&gt; gives rise to a “backwards”
&lt;code&gt;Applicative&lt;/code&gt; that does the shape “mappending” in reverse order:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;hello&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;world&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; forwards &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;Backwards&lt;/span&gt; (&lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class="op"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Backwards&lt;/span&gt; (&lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;world&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The monoidal nature of Applicative with regards to shapes and effects is the
heart of the original intent, and I’ve discussed this &lt;a
href="https://blog.jle.im/entry/const-applicative-and-monoids.html"&gt;in earlier
blog posts&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="alternative"&gt;Alternative&lt;/h2&gt;
&lt;p&gt;The main function of the &lt;em&gt;&lt;a
href="https://hackage.haskell.org/package/base-4.20.0.1/docs/Control-Applicative.html#g:2"&gt;Alternative&lt;/a&gt;&lt;/em&gt;
typeclass is &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;(&amp;lt;|&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Alternative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first this might look a lot like &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; or
&lt;code&gt;liftA2 (,)&lt;/code&gt;&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;liftA2 (,)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Applicative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (a, b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both of them take two &lt;code&gt;f a&lt;/code&gt; values and squish them into a single
one. Both of these are also monoidal on the shape, independent of the result.
They have a &lt;em&gt;different&lt;/em&gt; monoidal action on &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; than as
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- A part of list&amp;#39;s shape is its length:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- the Ap monoid is (*, 1), the Alt monoid is (+, 0)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (xs &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; ys) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; xs &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; ys&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; (xs &lt;span class="op"&gt;&amp;lt;|&amp;gt;&lt;/span&gt; ys) &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; xs &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;length&lt;/span&gt; ys&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;length&lt;/span&gt; empty &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Maybe&amp;#39;s shape is isJust:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- The Ap monoid is (&amp;amp;&amp;amp;, True), the Alt monoid is (||, False)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust (mx &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; my) &lt;span class="op"&gt;==&lt;/span&gt; isJust mx &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; isJust my&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust (&lt;span class="fu"&gt;pure&lt;/span&gt; r) &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust (mx &lt;span class="op"&gt;&amp;lt;|&amp;gt;&lt;/span&gt; my) &lt;span class="op"&gt;==&lt;/span&gt; isJust mx &lt;span class="op"&gt;||&lt;/span&gt; isJust my&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;isJust empty &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we understand that functors have a “shape”, &lt;code&gt;Applicative&lt;/code&gt;
implies that the shapes are monoidal, and &lt;code&gt;Alternative&lt;/code&gt; implies that
the shapes are a “double-monoid”. The exact nature of how the two monoids relate
to each other, however, is not universally agreed upon. For many instances,
however, it does happen to form a &lt;a
href="https://en.wikipedia.org/wiki/Semiring"&gt;semiring&lt;/a&gt;, where
&lt;code&gt;empty&lt;/code&gt; “annihilates” via &lt;code&gt;empty &amp;lt;*&amp;gt; x == empty&lt;/code&gt;,
and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; distributes over &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; like
&lt;code&gt;x &amp;lt;*&amp;gt; (y &amp;lt;|&amp;gt; z) == (x &amp;lt;*&amp;gt; y) &amp;lt;|&amp;gt; (x &amp;lt;*&amp;gt; z)&lt;/code&gt;.
But this is not universal.&lt;/p&gt;
&lt;p&gt;However, what does &lt;code&gt;Alternative&lt;/code&gt; bring to our shape/result
dichotomy that &lt;code&gt;Applicative&lt;/code&gt; did not? Notice the subtle difference
between the two:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;liftA2 (,)&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Applicative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (a, b)&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;(&amp;lt;|&amp;gt;) ::&lt;/span&gt; &lt;span class="dt"&gt;Alternative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For &lt;code&gt;Applicative&lt;/code&gt;, the “result” comes from the results of both
inputs. For &lt;code&gt;Alternative&lt;/code&gt;, the “result” could come from one or the
other input. So, this introduces a fundamental data dependency for the
&lt;em&gt;results&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applicative: Shapes merge monoidally independent of the results, but to get
the result of the final, you need to produce the results of both of the two
inputs in the general case.&lt;/li&gt;
&lt;li&gt;Alternative: Shapes merge monoidally independent of the results, but to get
the result of the final, you need the results of one or the other input in the
general case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This also implies that choice of combination method for shapes in
&lt;code&gt;Applicative&lt;/code&gt; vs &lt;code&gt;Alternative&lt;/code&gt; aren’t arbitrary: the
former has to be “conjoint” in a sense, and the latter has to be “disjoint”.&lt;/p&gt;
&lt;p&gt;See again that clearly separating the shape and the result gives us the
vocabulary to say precisely what the different data dependencies are.&lt;/p&gt;
&lt;h2 id="monad"&gt;Monad&lt;/h2&gt;
&lt;p&gt;Understanding shapes and results also help us appreciate more the sheer
&lt;em&gt;power&lt;/em&gt; that Monad gives us. Look at &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;(&amp;gt;&amp;gt;=) ::&lt;/span&gt; &lt;span class="dt"&gt;Monad&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; means that the shape of the final action is
allowed to &lt;em&gt;depend on the result&lt;/em&gt; of the first action! We are no longer
in the Applicative/Alternative world where shape only depends on shape.&lt;/p&gt;
&lt;p&gt;Now we can write things like:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;greet &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;putStrLn&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;What is your name?&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  n &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="fu"&gt;getLine&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;putStrLn&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;++&lt;/span&gt; n &lt;span class="op"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember that for “IO”, the shape is the IO effects (In this case, what
exactly gets sent to the terminal) and the “result” is the haskell value
computed from the execution of that IO effect. In our case, the &lt;em&gt;action&lt;/em&gt;
of the result (what values are printed) depends on the &lt;em&gt;result&lt;/em&gt; of of the
intermediate actions (the &lt;code&gt;getLine&lt;/code&gt;). You can no longer know in
advance what action the program will have without actually running it and
getting the results.&lt;/p&gt;
&lt;p&gt;The same thing happens when you start sequencing parser-combinator parsers:
you can’t know what counts as a valid parse or how much a parser will consume
until you actually start parsing and getting your intermediate parse
results.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Monad&lt;/code&gt; is also what makes &lt;code&gt;guard&lt;/code&gt; and co. useful.
Consider the purely Applicative:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;evenProducts ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Bool&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;evenProducts xs ys &lt;span class="ot"&gt;=&lt;/span&gt; (\x y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;even&lt;/span&gt; (x &lt;span class="op"&gt;*&lt;/span&gt; y)) &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; xs &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; ys&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you passed in a list of 100 items and a list of 200 items, you can know
that the result has 100 * 200 = 20000 items, without actually knowing any of the
items in the list.&lt;/p&gt;
&lt;p&gt;But, consider an alternative formulation where we are allowed to use Monad
operations:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;evenProducts ::&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Int&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [(&lt;span class="dt"&gt;Int&lt;/span&gt;, &lt;span class="dt"&gt;Int&lt;/span&gt;)]&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;evenProducts xs ys &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  x &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; xs&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  y &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; ys&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  guard (&lt;span class="fu"&gt;even&lt;/span&gt; (x &lt;span class="op"&gt;*&lt;/span&gt; y))&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;pure&lt;/span&gt; (x, y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;em&gt;even if you knew&lt;/em&gt; the lengths of the input lists, you can
&lt;em&gt;not&lt;/em&gt; know the length of the output list without actually knowing what’s
inside your lists. You need to actually start “sampling”.&lt;/p&gt;
&lt;p&gt;That’s why there is no &lt;code&gt;Monad&lt;/code&gt; instance for &lt;code&gt;Backwards&lt;/code&gt;
or &lt;em&gt;optparse-applicative&lt;/em&gt; parsers. For &lt;code&gt;Backwards&lt;/code&gt; doesn’t
work because we’ve now introduced an asymmetry (the &lt;code&gt;m b&lt;/code&gt; depends on
the &lt;code&gt;a&lt;/code&gt; of the &lt;code&gt;m a&lt;/code&gt;) that can’t be reversed. For
&lt;em&gt;optparse-applicative&lt;/em&gt;, it’s because we want to be able to inspect the
shape without knowing the results at runtime (so we can show a useful
&lt;code&gt;--help&lt;/code&gt; without getting any actual arguments): but, with
&lt;code&gt;Monad&lt;/code&gt;, we can’t know the shape without knowing the results!&lt;/p&gt;
&lt;p&gt;In a way, Monad simply “is” the way to combine &lt;code&gt;Functor&lt;/code&gt; shapes
together where the final shape is allowed to depend on the results. Hah, I
tricked you into reading a monad tutorial!&lt;/p&gt;
&lt;h2 id="free-structures"&gt;Free Structures&lt;/h2&gt;
&lt;p&gt;I definitely write &lt;a
href="https://blog.jle.im/entry/functor-combinatorpedia.html"&gt;way too much about
free structures&lt;/a&gt; on this blog. But this “shapeful” way of thinking also gives
rise to why free structures are so compelling and interesting to work with in
Haskell.&lt;/p&gt;
&lt;p&gt;Before, we were describing shapes of Functors and Applicatives and Monads
that already existed. We had &lt;em&gt;this&lt;/em&gt; &lt;code&gt;Functor&lt;/code&gt;, what was
&lt;em&gt;its&lt;/em&gt; shape?&lt;/p&gt;
&lt;p&gt;However, what if we had a shape that we had in mind, and wanted to
&lt;em&gt;create&lt;/em&gt; an &lt;code&gt;Applicative&lt;/code&gt; or &lt;code&gt;Monad&lt;/code&gt; that
manipulated that shape?&lt;/p&gt;
&lt;p&gt;For example, let’s roll our own version of &lt;em&gt;optparse-applicative&lt;/em&gt; that
only supported &lt;code&gt;--myflag somestring&lt;/code&gt; options. We could say that the
“shape” is the list of supported option and parsers. So a single element of this
shape would be the specification of a single option:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Option&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Option&lt;/span&gt; {&lt;span class="ot"&gt; optionName ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;,&lt;span class="ot"&gt; optionParse ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The “shape” here is the name and also what values it would parse,
essentially. &lt;code&gt;fmap&lt;/code&gt; won’t affect the name of the option and won’t
affect what would succeed or fail.&lt;/p&gt;
&lt;p&gt;Now, to create a full-fledged multi-argument parser, we can use &lt;a
href="https://hackage.haskell.org/package/free/docs/Control-Applicative-Free.html"&gt;&lt;code&gt;Ap&lt;/code&gt;
from the &lt;em&gt;free&lt;/em&gt; library&lt;/a&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Ap&lt;/span&gt; &lt;span class="dt"&gt;Option&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We specified the shape we wanted, now we get the &lt;code&gt;Applicative&lt;/code&gt; of
that shape for free! We can now combine our shapes monoidally using the
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; instance, and then use &lt;code&gt;runAp_&lt;/code&gt; to inspect
it:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;Args&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Args&lt;/span&gt; {&lt;span class="ot"&gt; myStringOpt ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;,&lt;span class="ot"&gt; myIntOpt ::&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;parseTwo ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; args&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;parseTwo &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Args&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; liftAp stringOpt &lt;span class="op"&gt;&amp;lt;*&amp;gt;&lt;/span&gt; liftAp intOpt&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    stringOpt &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Option&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;string-opt&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;    intOpt &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Option&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;int-opt&amp;quot;&lt;/span&gt; readMaybe&lt;/span&gt;
&lt;span id="cb17-8"&gt;&lt;a href="#cb17-8" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-9"&gt;&lt;a href="#cb17-9" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;getAllOptions ::&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;String&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb17-10"&gt;&lt;a href="#cb17-10" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;getAllOptions &lt;span class="ot"&gt;=&lt;/span&gt; runAp_ (\o &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [optionName o])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb18-1"&gt;&lt;a href="#cb18-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;ghci&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; getAllOptions parseTwo&lt;/span&gt;
&lt;span id="cb18-2"&gt;&lt;a href="#cb18-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;[&lt;span class="st"&gt;&amp;quot;string-opt&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;int-opt&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember that &lt;code&gt;Applicative&lt;/code&gt; is like a “monoid” for shapes, so
&lt;code&gt;Ap&lt;/code&gt; gives you a free “monoid” on your custom shape: you can now
create list-like “sequences” of your shape that merge via concatenation through
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;. You can also know that &lt;code&gt;fmap&lt;/code&gt; on
&lt;code&gt;Ap Option&lt;/code&gt; will not add or remove options: it’ll leave the actual
options unchanged. It’ll also not affect what options would fail or succeed to
parse.&lt;/p&gt;
&lt;p&gt;You could also write a parser combinator library this way too! Remember that
the “shape” of a parser combinator &lt;code&gt;Parser&lt;/code&gt; is the string that it
consumes or rejects. The single element might be a parser that consumes and
rejects a single &lt;code&gt;Char&lt;/code&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb19-1"&gt;&lt;a href="#cb19-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Single&lt;/span&gt; a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Single&lt;/span&gt; {&lt;span class="ot"&gt; satisfies ::&lt;/span&gt; &lt;span class="dt"&gt;Char&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;
&lt;span id="cb19-2"&gt;&lt;a href="#cb19-2" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="dt"&gt;Functor&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The “shape” is whether or not it consumes or rejects a char. Notice that
&lt;code&gt;fmap&lt;/code&gt; for this cannot &lt;em&gt;change&lt;/em&gt; whether or not a char is
rejected or accepted: it can only change the Haskell result &lt;code&gt;a&lt;/code&gt;
value. &lt;code&gt;fmap&lt;/code&gt; can’t flip the &lt;code&gt;Maybe&lt;/code&gt; into a
&lt;code&gt;Just&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we can create a full monadic parser combinator library by using &lt;a
href="https://hackage.haskell.org/package/free/docs/Control-Monad-Free.html"&gt;&lt;code&gt;Free&lt;/code&gt;
from the &lt;em&gt;free&lt;/em&gt; library&lt;/a&gt;:&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb20-1"&gt;&lt;a href="#cb20-1" aria-hidden="true" tabindex="-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Free&lt;/span&gt; &lt;span class="dt"&gt;Single&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, we specified the shape we wanted, and now we have a Monad for that
shape! For more information on using this, I’ve written &lt;a
href="https://blog.jle.im/entry/free-alternative-regexp.html"&gt;a blog post in the
past&lt;/a&gt;. &lt;code&gt;Ap&lt;/code&gt; gives you a free “monoid” on your shapes, but in a way
&lt;code&gt;Free&lt;/code&gt; gives you a “tree” for your shapes, where the sequence of
shapes depends on which way you go down their results. And, again,
&lt;code&gt;fmap&lt;/code&gt; won’t ever change what would or would not be parsed.&lt;/p&gt;
&lt;p&gt;How do we know what free structure to pick? Well, we ask questions about what
we want to be able to do with our shape. If we want to inspect the shape without
knowing the results, we’d use the free Applicative or free Alternative. As
discussed earlier, using the free Applicative means that our final result must
require producing all of the input results, but using the free Alternative means
it doesn’t. If we wanted to allow the shape to depend on the results (like for a
context-sensitive parser), we’d use the free Monad. Understanding the concept of
the “shape” makes this choice very intuitive.&lt;/p&gt;
&lt;h2 id="the-shape-of-you"&gt;The Shape of You&lt;/h2&gt;
&lt;p&gt;Next time you encounter a new Functor, I hope these insights can be useful.
Ask yourself, what is &lt;code&gt;fmap&lt;/code&gt; preserving? What is &lt;code&gt;fmap&lt;/code&gt;
changing? And from there, its secrets will unfold before you. &lt;a
href="https://en.wikipedia.org/wiki/Noether%27s_theorem"&gt;Emmy Noether&lt;/a&gt; would
be proud.&lt;/p&gt;
&lt;h2 id="special-thanks"&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;I am very humbled to be supported by an amazing community, who make it
possible for me to devote time to researching and writing these posts. Very
special thanks to my supporter at the “Amazing” level on &lt;a
href="https://www.patreon.com/justinle/overview"&gt;patreon&lt;/a&gt;, Josh Vera! :)&lt;/p&gt;
&lt;section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;There are &lt;em&gt;some&lt;/em&gt; exceptions, especially degenerate cases
like &lt;code&gt;Writer ()&lt;/code&gt; aka &lt;code&gt;Identity&lt;/code&gt; which add no meaningful
structure. So for these this mental model isn’t that useful.&lt;a href="#fnref1"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Incidentally, &lt;code&gt;Set.map&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; preserve one
thing: non-emptiness. You can’t &lt;code&gt;Set.map&lt;/code&gt; an empty set into a
non-empty one and vice versa. So, maybe if we recontextualized &lt;code&gt;Set&lt;/code&gt;
as a “search for at least one result” &lt;code&gt;Functor&lt;/code&gt; or &lt;code&gt;Monad&lt;/code&gt;
where you could only ever observe a single value, &lt;code&gt;Set.map&lt;/code&gt; would
work for Ord-restricted versions of those abstractions, assuming lawful
&lt;code&gt;Ord&lt;/code&gt; instances.&lt;a href="#fnref2" class="footnote-back"
role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;That is, if we take the sum consideration of all input-output
with the outside world, independent of what happens within the Haskell results,
we can say the combination of effects is deterministic.&lt;a href="#fnref3"
class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description><author>Justin Le</author><category>Haskell</category><guid isPermaLink="true">https://blog.jle.im/entry/functors-to-monads-a-story-of-shapes.html</guid><pubDate>Mon,  4 Nov 2024 19:44:50 UTC</pubDate><creator>Justin Le</creator><subject>Haskell</subject><date>2024-11-04</date></item><language>en</language><copyright>Copyright 2020 Justin Le</copyright><managingEditor>justin@jle.im (Justin Le)</managingEditor><webMaster>justin@jle.im (Justin Le)</webMaster><lastBuildDate>Thu, 21 Aug 2025 15:36:28 UTC</lastBuildDate><generator>feed-1.0.0.0 (Sigbjorn Finne)</generator><image><url>https://blog.jle.im/img/site_logo.jpg</url><title>in Code</title><link>https://blog.jle.im/</link></image><creator>Justin Le</creator><language>en</language><rights>Copyright 2020 Justin Le</rights><date>2025-08-21</date><description>Weblog of Justin Le, covering various adventures in programming and explorations in the worlds of computation physics, and knowledge.
</description></channel></rss>